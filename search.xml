<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue</title>
    <url>/2020/09/17/2020-09-17-Vue/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>tabs案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
       <span class="token selector">*</span><span class="token punctuation">&#123;</span>  <span class="token comment">/*设置全局页面的样式*/</span>
           <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
           <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
           <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token comment">/*去掉这个li的原点样式*/</span>
       <span class="token punctuation">&#125;</span>

       <span class="token selector">.tabs</span><span class="token punctuation">&#123;</span>
           <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
           <span class="token property">width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">;</span>
           <span class="token property">margin</span><span class="token punctuation">:</span> 20px auto<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>

       <span class="token comment">/*设置 li 的元素*/</span>
       <span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
           <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
           <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token comment">/*设置每个li的宽度*/</span>
           <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
           <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token comment">/*字体纵向居中 这个值设置跟页面高度一致就可以*/</span>
           <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment">/*实现水平居中*/</span>
           <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #d6d6d6<span class="token punctuation">;</span><span class="token comment">/*这里的边框线也是占用像素 所以有个宽度不够 有个框框会被挤下去*/</span>
           <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment">/*这个是css3的属性  规定让这个四个框框并排显示 实际上就是将边框线占用像素计算到盒子框框里面去*/</span>
           <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token comment">/*这里设置鼠标放过来是的点击指针特细*/</span>
       <span class="token punctuation">&#125;</span>

       <span class="token comment">/*设计这个选中的框框的样式*/</span>
       <span class="token selector">ul li.con</span><span class="token punctuation">&#123;</span>
           <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
           <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>

       <span class="token selector">.content</span><span class="token punctuation">&#123;</span>
           <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
           <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>

       <span class="token selector">.content.show</span><span class="token punctuation">&#123;</span>
           <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
           <span class="token comment">&lt;!--结合我们学过得 v-bind 和 v-on 来实现这个选项和内容 切换
               v-bind可以 通过判断来决定这个html标签的显示样式
               &#123;con: true or false&#125;前面那个是样式 后面那个参数 决定我们这个样式是否显示
           --></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;con:num==1&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;con:num==2&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num=2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;con:num==3&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num=3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;con:num==4&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num=4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
           <span class="token comment">&lt;!--这里就是显示内容的区域 这里实际上有4块区域 我们根据不同 选项来显示不同的内容--></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>content<span class="token punctuation">'</span>,&#123;show:num==1&#125;]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>content<span class="token punctuation">'</span>,&#123;show:num==2&#125;]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>content<span class="token punctuation">'</span>,&#123;show:num==3&#125;]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>content<span class="token punctuation">'</span>,&#123;show:num==4&#125;]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
       
       
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
       
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           num<span class="token operator">:</span><span class="token number">1</span><span class="token comment">//上面点击了 不同的选项 就改变这个对应的num数字 来实现 这个内容的切换</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>class样式</title>
    <url>/2020/09/17/2020-09-17-class%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
       <span class="token selector">.n1</span><span class="token punctuation">&#123;</span>
           <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>

       <span class="token selector">.n2</span><span class="token punctuation">&#123;</span>
           <span class="token property">font-size</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>

       <span class="token selector">.n3</span><span class="token punctuation">&#123;</span>
           <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token comment">/*斜体字*/</span>
       <span class="token punctuation">&#125;</span>
       
       <span class="token selector">.n4</span><span class="token punctuation">&#123;</span>
           <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
           <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--引入css样式 同时使用多个样式的话  一起倒入  用空格隔开--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n1 n2 n3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>世界那么大,我想去看看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--v-bind来绑定样式  中使用这个数组来绑定css样式 效果同上--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>n1<span class="token punctuation">'</span>,<span class="token punctuation">'</span>n2<span class="token punctuation">'</span>,<span class="token punctuation">'</span>n3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>世界那么大,我想去看看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--
           v-bind来绑定样式  在这个v-bind中我们可以进行一些简单逻辑判断
           根据不同的情况 去选择不同的样式 可以编写三目运算符
           v-bind里面的内容 如果不用单引号的话就是data中的数据
                           用了=单引号的话就是css样式
       --></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>n1<span class="token punctuation">'</span>,aaa ? <span class="token punctuation">'</span>n4<span class="token punctuation">'</span> : <span class="token punctuation">'</span>n2<span class="token punctuation">'</span> ,<span class="token punctuation">'</span>n3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>世界那么大,我想去看看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--在页面设置一个按钮 改变这个aaa的值--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>改变大小<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa=!aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--也可以直接在数组中进行显示判断  &#123;'n3': bbb&#125; 在这个花括号里面 就是可以根据后面的数值决定这个特性是否显示  bbb为false--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>n1<span class="token punctuation">'</span>,<span class="token punctuation">'</span>n2<span class="token punctuation">'</span>,&#123;<span class="token punctuation">'</span>n3<span class="token punctuation">'</span>: bbb&#125;]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>世界那么大,我想去看看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           aaa<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
           bbb<span class="token operator">:</span><span class="token boolean">false</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>v-for</title>
    <url>/2020/09/17/2020-09-17-v-for/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-for指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--  
           v-for 指令 就是用来循环遍历数组数据 一般来说我们就是用在动态显示表格数据
           学习前端：页面布局绘制（样式的编写）、数据的渲染（将从服务端获取的数据 渲染到页面）

           v-for语法：
               v-for="(item,index) in list"
                   item指的是 循环后取出的每一项
                   index表示的是 循环取出的每一项的下标（类似于数组的下标）
                   in 表示你遍历的是哪个数组
                   list  这个list名字就跟你遍历的数据的名称相同
       --></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
           &#123;&#123;index&#125;&#125; -------------- &#123;&#123;item&#125;&#125;
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

       <span class="token comment">&lt;!-- 一般来说我们就是用在动态显示表格数据
           一般来说 这边表格的数据 都是存放到服务器端的数据库
           前端使用来展示 后台的存放在数据库中的数据 来实现这个动态网站的效果
       --></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>明星列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--vue执行的时候 会根据 v-for指令  来循环访问这个msg里面的数据--></span>
               <span class="token comment">&lt;!--里面就是循环体的内容--></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>&#123;&#123;item.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>&#123;&#123;item.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>&#123;&#123;item.age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>&#123;&#123;item.sex&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>&#123;&#123;item.address&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           <span class="token comment">//如何将这里的数组数据 显示到页面中</span>
           list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'赵柳'</span><span class="token punctuation">,</span><span class="token string">'陆琪'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           <span class="token comment">//假设 我这里的数据 是从服务器端获取</span>
           <span class="token comment">//[]表示的是个数组</span>
           <span class="token comment">//&#123;&#125;表示的是单个对象</span>
           msg<span class="token operator">:</span><span class="token punctuation">[</span>
               <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'坤坤'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'中国篮球县'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
               <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'凡凡'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'加拿大电音县'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
               <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'涛涛'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'中国河南'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
               <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'晗晗'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">26</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">'中国'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

           <span class="token punctuation">]</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>v-mode</title>
    <url>/2020/09/17/2020-09-17-v-mode/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-bind的作用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--通过 在页面文本框 中修改这个msg数据 然后实时显示到 上面的差值表达式--></span>
       <span class="token comment">&lt;!--试试 v-bind 修改html属性--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这里我们使用 v-bind 指令试试看看能不能实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--我们使用 v-bind（缩写成了冒号:）无法实现这个数据的同步显示--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这里我们可以使用新的指令 v-model来实现这个数据的双向绑定 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--我们使用v-model 双向数据绑定指令的话 就可以在页面中修改 model模型数据--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           msg<span class="token operator">:</span><span class="token string">'Hello World'</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
       methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//在vue中 所有的方法都是定义在这里这个区域</span>

       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-bind的作用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--通过 在页面文本框 中修改这个msg数据 然后实时显示到 上面的差值表达式--></span>
       <span class="token comment">&lt;!--试试 v-bind 修改html属性--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这里我们使用 v-bind 指令试试看看能不能实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--我们使用 v-bind（缩写成了冒号:）无法实现这个数据的同步显示--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这里我们可以使用新的指令 v-model来实现这个数据的双向绑定 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--我们使用v-model 双向数据绑定指令的话 就可以在页面中修改 model模型数据--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           msg<span class="token operator">:</span><span class="token string">'Hello World'</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
       methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//在vue中 所有的方法都是定义在这里这个区域</span>

       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>用Vue编写一个简易计算器</title>
    <url>/2020/09/17/2020-09-17-%E7%94%A8Vue%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>简易计算器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--计数器第一个数字的输入框--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--运算符号的 复选框  这里使用v-mode指令 进行数据的双向绑定  option的value改变了的话  data里面的数据也会改变--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>+<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--计数器第二个数字的输入框--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--点击 进行运算的按钮--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>=<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--按钮 这里要有这个点击事件 当我点击了 按钮后计算出运算结果--></span>
       <span class="token comment">&lt;!--运算结果的 框框--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           num1<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
           num2<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
           result<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
           opt<span class="token operator">:</span><span class="token string">'+'</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
       methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//在vue中 所有的方法都是定义在这里这个区域</span>
       <span class="token comment">//但用户点击 = 按钮的时候 出发这个计算函数</span>
           <span class="token function">cul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               <span class="token comment">//这里的话 需要根据用户选定的运算符号 进行判断  </span>
               <span class="token comment">//我们需要判断用户的选择的运算符号</span>
               <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                   <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>
                       <span class="token comment">//处理加法运算的语法</span>
                       <span class="token comment">//如果是加法运算的话  在JavaScript里面 你需转换一下字符串 将字符串转成数字 方法parseInt()</span>
                       <span class="token comment">//加号 默认是进行字符串的一个拼接的 需要将这个字符串 转换成 数字parseInt()</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token keyword">break</span><span class="token punctuation">;</span>
                   <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>
                       <span class="token comment">//处理减法运算的语法  - 号拿出来就是直接进行减法运算</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">;</span>
                       <span class="token keyword">break</span><span class="token punctuation">;</span>
                   <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>
                       <span class="token comment">//处理乘法运算的语法</span>
                       <span class="token comment">// this.result = parseInt(this.num1)* parseInt(this.num2); 效果更下面的是一样的</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">;</span>
                       <span class="token keyword">break</span><span class="token punctuation">;</span>
                   <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>
                       <span class="token comment">//处理除法运算的语法</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">;</span>
                       <span class="token keyword">break</span><span class="token punctuation">;</span>
               <span class="token punctuation">&#125;</span>
           <span class="token punctuation">&#125;</span>

       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-bind的作用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--通过 在页面文本框 中修改这个msg数据 然后实时显示到 上面的差值表达式--></span>
       <span class="token comment">&lt;!--试试 v-bind 修改html属性--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这里我们使用 v-bind 指令试试看看能不能实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--我们使用 v-bind（缩写成了冒号:）无法实现这个数据的同步显示--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这里我们可以使用新的指令 v-model来实现这个数据的双向绑定 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--我们使用v-model 双向数据绑定指令的话 就可以在页面中修改 model模型数据--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
       el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
       data<span class="token operator">:</span><span class="token punctuation">&#123;</span>
           msg<span class="token operator">:</span><span class="token string">'Hello World'</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
       methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//在vue中 所有的方法都是定义在这里这个区域</span>

       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS安装Mysql</title>
    <url>/2020/11/02/2020-11-02-CentOS%E5%AE%89%E8%A3%85Mysql/</url>
    <content><![CDATA[<h3 id="1-下载wget命令"><a href="#1-下载wget命令" class="headerlink" title="1 下载wget命令"></a>1 下载wget命令</h3><pre class="line-numbers language-none"><code class="language-none">yum -y install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-在线下载mysql安装包"><a href="#2-在线下载mysql安装包" class="headerlink" title="2 在线下载mysql安装包"></a>2 在线下载mysql安装包</h3><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3 安装MySQL"></a>3 安装MySQL</h3><pre class="line-numbers language-none"><code class="language-none">rpm -ivh mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/001.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/001.png" alt="img"></a></p>
<h3 id="4-安装mysql服务"><a href="#4-安装mysql服务" class="headerlink" title="4 安装mysql服务"></a>4 安装mysql服务</h3><ul>
<li>首先进入<code>cd /etc/yum.repos.d/</code>目录。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/002.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/002.png" alt="img"></a></p>
<ul>
<li>安装MySQL服务（这个过程可能有点慢）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">yum -y install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/003.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/003.png" alt="img"></a></p>
<h3 id="5-启动MySQL"><a href="#5-启动MySQL" class="headerlink" title="5 启动MySQL"></a>5 启动MySQL</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="6-修改MySQL临时密码"><a href="#6-修改MySQL临时密码" class="headerlink" title="6 修改MySQL临时密码"></a>6 修改MySQL临时密码</h2><p>MySQL安装成功后会有一个临时密码，我们可以使用<code>grep</code>命令查看临时密码先登录进去MySQL，然后修改MySQL密码。</p>
<h3 id="7-获取MySQL临时密码"><a href="#7-获取MySQL临时密码" class="headerlink" title="7 获取MySQL临时密码"></a>7 获取MySQL临时密码</h3><pre class="line-numbers language-none"><code class="language-none">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/004.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/004.png" alt="img"></a></p>
<h3 id="8-使用临时密码先登录"><a href="#8-使用临时密码先登录" class="headerlink" title="8 使用临时密码先登录"></a>8 使用临时密码先登录</h3><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>我的临时密码是：a22XRJ88=+a;</p>
</blockquote>
<h3 id="10-把MySQL的密码校验强度改为低风险"><a href="#10-把MySQL的密码校验强度改为低风险" class="headerlink" title="10 把MySQL的密码校验强度改为低风险"></a>10 把MySQL的密码校验强度改为低风险</h3><pre class="line-numbers language-none"><code class="language-none">set global validate_password_policy&#x3D;LOW;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="11-修改MySQL的密码长度"><a href="#11-修改MySQL的密码长度" class="headerlink" title="11 修改MySQL的密码长度"></a>11 修改MySQL的密码长度</h3><pre class="line-numbers language-none"><code class="language-none">set global validate_password_length&#x3D;5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="12-修改MySQL密码"><a href="#12-修改MySQL密码" class="headerlink" title="12 修改MySQL密码"></a>12 修改MySQL密码</h3><pre class="line-numbers language-none"><code class="language-none">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;admin&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="13-允许远程访问"><a href="#13-允许远程访问" class="headerlink" title="13 允许远程访问"></a>13 允许远程访问</h2><h3 id="首先要关闭Cenots的防火墙"><a href="#首先要关闭Cenots的防火墙" class="headerlink" title="首先要关闭Cenots的防火墙"></a>首先要关闭Cenots的防火墙</h3><pre class="line-numbers language-none"><code class="language-none">sudo systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="修改MySQL允许任何人连接"><a href="#修改MySQL允许任何人连接" class="headerlink" title="修改MySQL允许任何人连接"></a>修改MySQL允许任何人连接</h3><p>1）首先登录MySQL</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -padmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2）切换到mysql数据</p>
<pre class="line-numbers language-none"><code class="language-none">use mysql;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3）查看user表</p>
<pre class="line-numbers language-none"><code class="language-none">select Host,User from user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/005.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/005.png" alt="img"></a></p>
<p>发现<code>root</code>用户只允许<code>localhost</code>主机登录登录。</p>
</blockquote>
<p>4）修改为允许任何地址访问</p>
<pre class="line-numbers language-none"><code class="language-none">update user set Host&#x3D;&#39;%&#39; where User&#x3D;&#39;root&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5）刷新权限</p>
<pre class="line-numbers language-none"><code class="language-none">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="14-防火墙开放3306端口"><a href="#14-防火墙开放3306端口" class="headerlink" title="14 防火墙开放3306端口"></a>14 防火墙开放3306端口</h3><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanentfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/006.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/006.png" alt="img"></a></p>
<h2 id="15-设置字符集"><a href="#15-设置字符集" class="headerlink" title="15 设置字符集"></a>15 设置字符集</h2><p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置</p>
<pre class="line-numbers language-none"><code class="language-none">character_set_server&#x3D;utf8init_connect&#x3D;&#39;SET NAMES utf8&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/007.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/007.png" alt="img"></a></p>
<h2 id="17重启MySQL"><a href="#17重启MySQL" class="headerlink" title="17重启MySQL"></a>17重启MySQL</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost data]# systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="登录root用户查看编码"><a href="#登录root用户查看编码" class="headerlink" title="登录root用户查看编码"></a>登录root用户查看编码</h3><pre class="line-numbers language-none"><code class="language-none">show variables like &#39;char%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/008.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/008.png" alt="img"></a></p>
<h2 id="18-远程工具连接"><a href="#18-远程工具连接" class="headerlink" title="18 远程工具连接"></a>18 远程工具连接</h2><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/009.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/009.png" alt="img"></a></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/010.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/010.png" alt="img"></a></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/011.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/011.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS安装Redis</title>
    <url>/2020/11/02/2020-11-02-CentOS%E5%AE%89%E8%A3%85Redis/</url>
    <content><![CDATA[<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><h3 id="1-1下载安装包"><a href="#1-1下载安装包" class="headerlink" title="1.1下载安装包"></a>1.1下载安装包</h3><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-11-07.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-11-07.png" alt="img"></a></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-15-08.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-15-08.png" alt="img"></a></p>
<pre class="line-numbers language-none"><code class="language-none">tar -zxvf redis-6.0.9.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我这里是解压并放在redis这个目录下</p>
<h3 id="1-2在线下载"><a href="#1-2在线下载" class="headerlink" title="1.2在线下载"></a>1.2在线下载</h3><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-45-08.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-45-08.png" alt="img"></a></p>
<pre class="line-numbers language-none"><code class="language-none">[kite@localhost redis]# wget https:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.9.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-06-51.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-06-51.png" alt="img"></a></p>
<p>然后解压</p>
<pre class="line-numbers language-none"><code class="language-none">tar -zxvf redis-6.0.9.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="2-确认GCC的版本，进入终端命令如下："><a href="#2-确认GCC的版本，进入终端命令如下：" class="headerlink" title="2.确认GCC的版本，进入终端命令如下："></a>2.确认GCC的版本，进入终端命令如下：</h2><pre class="line-numbers language-none"><code class="language-none">yum install gcc

gcc -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>安装Redis6.0需要将gcc版本升级到5.3以上，则升级gcc命令如下：</p>
<pre class="line-numbers language-none"><code class="language-none">yum -y install centos-release-scl
yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils
#临时修改gcc版本
scl enable devtoolset-9 bash
#永久修改gcc版本
echo &quot;source &#x2F;opt&#x2F;rh&#x2F;devtoolset-9&#x2F;enable&quot; &gt;&gt;&#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行完成后，再次查看gcc的版本</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-53-34.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-53-34.png" alt="img"></a></p>
<h2 id="3-编译redis"><a href="#3-编译redis" class="headerlink" title="3.编译redis"></a>3.编译redis</h2><p>进入redis解压后的目录</p>
<p>编译</p>
<pre class="line-numbers language-none"><code class="language-none">make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-58-56.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/Snipaste_2020-11-02_09-58-56.png" alt="img"></a></p>
<h2 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h2><p>绑定所有ip，后台方式运行进程，设置密码</p>
<pre class="line-numbers language-none"><code class="language-none">vim redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#允许任何ip都可以连接</p>
<pre class="line-numbers language-none"><code class="language-none">bind 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#允许后台运行</p>
<pre class="line-numbers language-none"><code class="language-none">daemonize yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#保护模式</p>
<blockquote>
<p>redis3.2版本后新增protected-mode配置，默认是yes，即开启。设置外部网络连接redis服务，设置方式如下： 1、关闭protected-mode模式，此时外部网络可以直接访问 2、开启protected-mode保护模式，需配置bind ip或者设置访问密码</p>
</blockquote>
<p><strong>默认是开启的，需要再启用密码配置如下：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">requirepass 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或者关闭保护模式，无需密码设置</p>
<h2 id="5-启动redis，带上配置文件"><a href="#5-启动redis，带上配置文件" class="headerlink" title="5.启动redis，带上配置文件"></a>5.启动redis，带上配置文件</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis-6.0.9]#.&#x2F;src&#x2F;redis-server redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="6-命令行客户端连接"><a href="#6-命令行客户端连接" class="headerlink" title="6.命令行客户端连接"></a>6.命令行客户端连接</h2><p>输入密码</p>
<pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost redis-6.0.9]# .&#x2F;src&#x2F;redis-cli
127.0.0.1:6379&gt; auth 123456
OK
127.0.0.1:6379&gt; set a b
OK
127.0.0.1:6379&gt; get a
&quot;b&quot;
127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>用Vue路由模拟京东导航条</title>
    <url>/2020/11/12/2020-11-12-%E7%94%A8Vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E6%8B%9F%E4%BA%AC%E4%B8%9C%E5%AF%BC%E8%88%AA%E6%9D%A1/</url>
    <content><![CDATA[<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/vue110.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/vue110.png" alt="img"></a></p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!DOCTYPE html&gt;
&lt;html lang&#x3D;&quot;en&quot;&gt;
&lt;head&gt;
   &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
   &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
   &lt;title&gt;模拟京东导航条&lt;&#x2F;title&gt;
&lt;&#x2F;head&gt;
&lt;style&gt;
   * &#123;
       padding: 0;
       margin: 0;
   &#125;

   ul&#123;
       list-style: none;
       &#x2F;*固定定位，将标签元素固定到浏览器的某个位置*&#x2F;
       position: fixed;
       left: 0;
       &#x2F;*标签距离底部的位置*&#x2F;
       bottom: 0;
       &#x2F;*使用弹性布局*&#x2F;
       display: flex;
       width: 100%;
       &#x2F;*上边框线*&#x2F;
       border-top: 0.6px solid #d6d6d6;
   &#125;

   ul li&#123;
       flex: 1;
       height: 40px;
       &#x2F;*这个行高等于元素高度的话 就是里面的内容纵向居中的意思*&#x2F;
       line-height: 40px;
       text-align: center;
   &#125;

   ul li.con&#123;
       background-color: red;
       color: white;
   &#125;

&lt;&#x2F;style&gt;
&lt;body&gt;
   &lt;div id&#x3D;&quot;app&quot; &gt;
       &lt;ul&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;index&quot; tag&#x3D;&quot;li&quot;&gt;首页&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;sort&quot; tag&#x3D;&quot;li&quot;&gt;分类&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;surprise&quot; tag&#x3D;&quot;li&quot;&gt;京喜&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;cart&quot; tag&#x3D;&quot;li&quot;&gt;购物车&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;login&quot; tag&#x3D;&quot;li&quot;&gt;登录&lt;&#x2F;router-link&gt;
       &lt;&#x2F;ul&gt;

       &lt;!--定义一个路由的坑位--&gt;
       &lt;router-view&gt;&lt;&#x2F;router-view&gt;
   &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script src&#x3D;&quot;vue-router.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script&gt;
       &#x2F;&#x2F;创建一下路由地址对应的组件
       var index &#x3D; &#123;
           template:&#39;&lt;h1&gt;欢迎来到首页&lt;&#x2F;h1&gt;&#39;
       &#125;

       var sort &#x3D; &#123;
           template:&#39;&lt;h1&gt;商品分类页面&lt;&#x2F;h1&gt;&#39;
       &#125;

       var surprise &#x3D; &#123;
           template:&#39;&lt;h1&gt;京喜页面&lt;&#x2F;h1&gt;&#39;
       &#125;

       var cart &#x3D; &#123;
           template:&#39;&lt;h1&gt;购物车页面&lt;&#x2F;h1&gt;&#39;
       &#125;

       var login &#x3D; &#123;
           template:&#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;
       &#125;

       &#x2F;&#x2F;创建一个路由对象
       var router &#x3D; new VueRouter(&#123;
           &#x2F;&#x2F;里面添加路由规则
           routes:[
               &#123;path:&#39;&#x2F;&#39;,component:index&#125;,&#x2F;&#x2F;当页面打开的就显示欢迎页面index组件
               &#123;path:&#39;&#x2F;index&#39;,component:index&#125;,
               &#123;path:&#39;&#x2F;sort&#39;,component:sort&#125;,
               &#123;path:&#39;&#x2F;surprise&#39;,component:surprise&#125;,
               &#123;path:&#39;&#x2F;cart&#39;,component:cart&#125;,
               &#123;path:&#39;&#x2F;login&#39;,component:login&#125;,
           ],
           &#x2F;&#x2F;使用路由来选中的标签的样式
           linkActiveClass:&#39;con&#39;
       &#125;);


   var vm &#x3D; new Vue(&#123;
       el:&#39;#app&#39;,
       data:&#123;
           flag:true,
           common:&#39;&#39;
       &#125;,
       methods: &#123;

       &#125;,
       &#x2F;&#x2F;路由对象创建好后，将这个路由对象挂载到vue实例中
       router:router
   &#125;);

&lt;&#x2F;script&gt;
&lt;&#x2F;html&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang&#x3D;&quot;en&quot;&gt;
&lt;head&gt;
   &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
   &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
   &lt;title&gt;模拟京东导航条&lt;&#x2F;title&gt;
&lt;&#x2F;head&gt;
&lt;style&gt;
   * &#123;
       padding: 0;
       margin: 0;
   &#125;

   ul&#123;
       list-style: none;
       &#x2F;*固定定位，将标签元素固定到浏览器的某个位置*&#x2F;
       position: fixed;
       left: 0;
       &#x2F;*标签距离底部的位置*&#x2F;
       bottom: 0;
       &#x2F;*使用弹性布局*&#x2F;
       display: flex;
       width: 100%;
       &#x2F;*上边框线*&#x2F;
       border-top: 0.6px solid #d6d6d6;
   &#125;

   ul li&#123;
       flex: 1;
       height: 40px;
       &#x2F;*这个行高等于元素高度的话 就是里面的内容纵向居中的意思*&#x2F;
       line-height: 40px;
       text-align: center;
   &#125;

   ul li.con&#123;
       background-color: red;
       color: white;
   &#125;

&lt;&#x2F;style&gt;
&lt;body&gt;
   &lt;div id&#x3D;&quot;app&quot; &gt;
       &lt;ul&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;index&quot; tag&#x3D;&quot;li&quot;&gt;首页&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;sort&quot; tag&#x3D;&quot;li&quot;&gt;分类&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;surprise&quot; tag&#x3D;&quot;li&quot;&gt;京喜&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;cart&quot; tag&#x3D;&quot;li&quot;&gt;购物车&lt;&#x2F;router-link&gt;
           &lt;router-link to&#x3D;&quot;&#x2F;login&quot; tag&#x3D;&quot;li&quot;&gt;登录&lt;&#x2F;router-link&gt;
       &lt;&#x2F;ul&gt;

       &lt;!--定义一个路由的坑位--&gt;
       &lt;router-view&gt;&lt;&#x2F;router-view&gt;
   &lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script src&#x3D;&quot;vue-router.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script&gt;
       &#x2F;&#x2F;创建一下路由地址对应的组件
       var index &#x3D; &#123;
           template:&#39;&lt;h1&gt;欢迎来到首页&lt;&#x2F;h1&gt;&#39;
       &#125;

       var sort &#x3D; &#123;
           template:&#39;&lt;h1&gt;商品分类页面&lt;&#x2F;h1&gt;&#39;
       &#125;

       var surprise &#x3D; &#123;
           template:&#39;&lt;h1&gt;京喜页面&lt;&#x2F;h1&gt;&#39;
       &#125;

       var cart &#x3D; &#123;
           template:&#39;&lt;h1&gt;购物车页面&lt;&#x2F;h1&gt;&#39;
       &#125;

       var login &#x3D; &#123;
           template:&#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;
       &#125;

       &#x2F;&#x2F;创建一个路由对象
       var router &#x3D; new VueRouter(&#123;
           &#x2F;&#x2F;里面添加路由规则
           routes:[
               &#123;path:&#39;&#x2F;&#39;,component:index&#125;,&#x2F;&#x2F;当页面打开的就显示欢迎页面index组件
               &#123;path:&#39;&#x2F;index&#39;,component:index&#125;,
               &#123;path:&#39;&#x2F;sort&#39;,component:sort&#125;,
               &#123;path:&#39;&#x2F;surprise&#39;,component:surprise&#125;,
               &#123;path:&#39;&#x2F;cart&#39;,component:cart&#125;,
               &#123;path:&#39;&#x2F;login&#39;,component:login&#125;,
           ],
           &#x2F;&#x2F;使用路由来选中的标签的样式
           linkActiveClass:&#39;con&#39;
       &#125;);


   var vm &#x3D; new Vue(&#123;
       el:&#39;#app&#39;,
       data:&#123;
           flag:true,
           common:&#39;&#39;
       &#125;,
       methods: &#123;

       &#125;,
       &#x2F;&#x2F;路由对象创建好后，将这个路由对象挂载到vue实例中
       router:router
   &#125;);

&lt;&#x2F;script&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>上传项目到github</title>
    <url>/2020/11/15/2020-11-15-%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/</url>
    <content><![CDATA[<h2 id="1-配置ssh秘钥"><a href="#1-配置ssh秘钥" class="headerlink" title="1.配置ssh秘钥"></a><strong>1.配置ssh秘钥</strong></h2><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;填在github上注册的邮箱地址&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/github-1.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/github-1.png" alt="img"></a></p>
<p><strong>2.到目录下的id_rsa.pub用记事本打开</strong></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/github-2.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/github-2.png" alt="img"></a></p>
<p><strong>3.并复制到</strong></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/github-3.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/github-3.png" alt="img"></a></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/github-4.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/github-4.png" alt="img"></a><a href="https://gitee.com/ming0419/tuchuang/raw/master/github-5.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/github-5.png" alt="img"></a></p>
<p><strong>4.首先是初始化本地仓库</strong></p>
<pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/book-5.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/book-5.png" alt="img"></a></p>
<p><strong>5.以下两个命令都可以用，具体的作用就像注释说的</strong></p>
<pre class="line-numbers language-none"><code class="language-none">git add filename    &#x2F;&#x2F;添加工作区下某个文件到暂存区git add .                 &#x2F;&#x2F;添加目录下全部文件到暂存区<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/book-1.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/book-1.png" alt="img"></a></p>
<p><strong>6.</strong></p>
<pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;随便写点你对本次修改的描述&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/book-2.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/book-2.png" alt="img"></a></p>
<p><strong>7.</strong></p>
<pre class="line-numbers language-none"><code class="language-none">git remote add origin 你的仓库地址如：git remote add origin https:&#x2F;&#x2F;github.com&#x2F;ming-0419&#x2F;book-ms-1933.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/book-3.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/book-3.png" alt="img"></a></p>
<p><strong>8.登录</strong></p>
<pre class="line-numbers language-none"><code class="language-none">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/book-4.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/book-4.png" alt="img"></a></p>
<p><strong>9.输入你github用户名账号</strong></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
  </entry>
  <entry>
    <title>双亲委派机制</title>
    <url>/2020/11/17/2020-11-17-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/cmm0401/article/details/108808522?biz_id=102&utm_term=%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-108808522&spm=1018.2118.3001.4449">原文：CSDN博主风暴计划</a></p>
<h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>双亲委派模型要求<strong>除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器</strong>。</p>
<p>双亲委派模型的工作过程是：</p>
<ul>
<li>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成。</li>
<li>每一个层次的类加载器都是如此。因此，所有的加载请求最终都应该传送到顶层的启动类加载器中。</li>
<li>只有当父加载器反馈自己无法完成这个加载请求时（搜索范围中没有找到所需的类），子加载器才会尝试自己去加载。</li>
</ul>
<p>《 很多人对“双亲”一词很困惑。这是翻译的锅。“双亲”只是“parents”的直译，实际上并不表示汉语中的父母双亲，而是一代一代很多parent，即parents。》</p>
<h2 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h2><p><strong>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在虚拟机中的唯一性</strong>，每一个类加载器，都拥有一个独立的类名称空间。因此，使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处：<strong>类随着它的类加载器一起具备了一种带有优先级的层次关系</strong>。</p>
<p>例如类 <code>java.lang.Object</code>，它由启动类加载器加载。双亲委派模型保证任何类加载器收到的对<code>java.lang.Object</code>的加载请求，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此<strong>Object类在程序的各种类加载器环境中都是同一个类</strong>。</p>
<p>相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为java.lang.Object的类，并用自定义的类加载器加载，那系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。</p>
<h2 id="1-3-结构"><a href="#1-3-结构" class="headerlink" title="1.3 结构"></a>1.3 结构</h2><h3 id="1-3-1-系统提供的类加载器"><a href="#1-3-1-系统提供的类加载器" class="headerlink" title="1.3.1 系统提供的类加载器"></a>1.3.1 系统提供的类加载器</h3><p>在双亲委派模型的定义中提到了“启动类加载器”。包括启动类加载器，绝大部分Java程序都会使用到以下3种系统提供的类加载器：</p>
<ul>
<li>启动类加载器（Bootstrap ClassLoader）</li>
</ul>
<p>负责将存放在<code>＜JAVA_HOME＞/lib</code>目录中的，或者被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是虚拟机按照文件名识别的（如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。</p>
<p>启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可。</p>
<p>《 JDK中的常用类大都由启动类加载器加载，如java.lang.String、java.util.List等。需要特别说明的是，启动类Main class也由启动类加载器加载。》</p>
<ul>
<li>扩展类加载器（Extension ClassLoader）</li>
</ul>
<p>由<code>sun.misc.Launcher$ExtClassLoader</code>实现。</p>
<p>负责加载<code>＜JAVA_HOME＞/lib/ext</code>目录中的，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库。</p>
<p>开发者可以直接使用扩展类加载器。</p>
<p>《 猴子对自己电脑<code>＜JAVA_HOME＞/lib/ext</code>目录下的jar包都非常陌生。看了几个jar包，也没找到常用的类；唯一有点印象的是jfxrt.jar，被用于JavaFX的开发之中。》</p>
<ul>
<li>应用程序类加载器（Application ClassLoader）</li>
</ul>
<p>由<code>sun.misc.Launcher$AppClassLoader</code>实现。由于这个类加载器是<code>ClassLoader.getSystemClassLoader()</code>方法的返回值，所以一般也称它为系统类加载器。</p>
<p>它负责加载用户类路径<code>ClassPath</code>上所指定的类库，开发者可以直接使用这个类加载器。<strong>如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器</strong>。</p>
<p>《 启动类Main class、其他如工程中编写的类、maven引用的类，都会被放置在类路径下。Main class由启动类加载器加载，其他类由应用程序类加载器加载。》</p>
<h3 id="1-3-2-自定义的类加载器"><a href="#1-3-2-自定义的类加载器" class="headerlink" title="1.3.2 自定义的类加载器"></a>1.3.2 自定义的类加载器</h3><p>JVM建议用户将应用程序类加载器作为自定义类加载器的父类加载器。</p>
<p>类加载的双亲委派执行流程图如下：</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201117005134311.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201117005134311.png" alt="image-20201117005134311"></a></p>
<p>=============================================================================================</p>
<p>=============================================================================================</p>
<h1 id="1、什么是双亲委派机制"><a href="#1、什么是双亲委派机制" class="headerlink" title="1、什么是双亲委派机制"></a>1、什么是双亲委派机制</h1><p>当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个请求任务委托给它的上级类加载器，递归这个操作，如果上级类加载器都没有加载，自己才会去加载这个类。</p>
<h1 id="2、类加载器的类别"><a href="#2、类加载器的类别" class="headerlink" title="2、类加载器的类别"></a>2、类加载器的类别</h1><p>（1）启动类加载器：BootStrapClassLoader</p>
<p><code>c++</code>编写，加载<code>java的</code>核心库 <code>java.*，</code>构造<code>ExtClassLoader</code>和<code>AppClassLoader</code>。由于启动类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。</p>
<p>（2）扩展类加载器：ExtClassLoader</p>
<p><code>java</code>编写，加载java的扩展库，如<code>classpath</code>中的<code>jre</code> ，<code>javax.*</code>或者 <code>java.ext.dir</code> 指定位置中的类，开发者可以直接使用标准扩展类加载器。</p>
<p>（3）应用程序类加载器：AppClassLoader</p>
<pre class="line-numbers language-none"><code class="language-none">java&#96;编写，加载应用程序所在的目录，如&#96;user.dir&#96;所在的位置的&#96;class。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>（4）用户自定义类加载器：CustomClassLoader</p>
<p><code>java</code>编写，用户自定义的类加载器,可加载指定路径的<code>class</code>文件。</p>
<h1 id="3、源码分析"><a href="#3、源码分析" class="headerlink" title="3、源码分析"></a>3、源码分析</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
           <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span>
   <span class="token punctuation">&#123;</span>
       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token comment">// 首先检查这个classsh是否已经加载过了</span>
           <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                   <span class="token comment">// c==null表示没有加载，如果有父类的加载器则让父类加载器加载</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                       c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                       <span class="token comment">//如果父类的加载器为空 则说明递归到bootStrapClassloader了</span>
                       <span class="token comment">//bootStrapClassloader比较特殊无法通过get获取</span>
                       c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">&#125;</span>
               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                   <span class="token comment">//如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class</span>
                   <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">&#125;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">return</span> c<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="4、双亲委派机制的执行流程图"><a href="#4、双亲委派机制的执行流程图" class="headerlink" title="4、双亲委派机制的执行流程图"></a>4、双亲委派机制的执行流程图</h1><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201117005026922.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201117005026922.png" alt="image-20201117005026922"></a></p>
<h1 id="5、双亲委派机制的作用"><a href="#5、双亲委派机制的作用" class="headerlink" title="5、双亲委派机制的作用"></a>5、双亲委派机制的作用</h1><p>1、防止重复加载同一个<code>.class文件</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍了，保证数据安全。</p>
<p>2、保证核心 <code>.class文件</code>不被篡改。通过向上委托的方式，不会去篡改核心 <code>.class 文件</code>，即使篡改也不会去加载，即使加载也不会是同一个 <code>.class</code>对象 。不同的类加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>JVM详解 -&gt; native &amp; 方法区</title>
    <url>/2020/11/19/2020-11-19-JVM%E8%AF%A6%E8%A7%A3---native-&amp;-%E6%96%B9%E6%B3%95%E5%8C%BA/</url>
    <content><![CDATA[<h4 id="1-native-关键字"><a href="#1-native-关键字" class="headerlink" title="1. native 关键字"></a>1. native 关键字</h4><ul>
<li>native ：凡是带了native关键字的，说明Java的作用范围达不到了，会调用底层C语言的库</li>
<li>进入本地方法栈；调用本地方法接口JNI，JNI作用：扩展Java的使用，融合不同的编程语言为Java所有，最初是为了融合C C++</li>
<li>在内存区域中专门开辟了一块标记区域：Native Method Stack，登记native方法</li>
<li>在最终执行的时候，在执行引擎中通过JNI加载本地方法库中的方法</li>
<li>目前该方法的使用越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机、Java系统管理生产设备等，在企业级应用中已经比较少见。因为现在的异构领域间通信很发达，比如可以使用Socket通信，也可以使用Web Service等。</li>
</ul>
<h4 id="2-PC寄存器"><a href="#2-PC寄存器" class="headerlink" title="2. PC寄存器"></a>2. PC寄存器</h4><ul>
<li><p>程序计数器：Program Counter Register</p>
</li>
<li><ul>
<li>每一个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</li>
</ul>
</li>
</ul>
<h4 id="3-方法区"><a href="#3-方法区" class="headerlink" title="3. 方法区"></a>3. 方法区</h4><ul>
<li><p>方法区：Method Area</p>
</li>
<li><ul>
<li>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单的说，所有定义的方法的信息都保存在方法区，此区域属于共享区间；</li>
<li><strong>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中；但，实例变量存在堆内存中，和方法区无关</strong></li>
<li>static、final、Class模板、常量池</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>GC垃圾回收机制</title>
    <url>/2020/11/23/2020-11-23-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>不能手动回收，只能自动回收</p>
<p>垃圾回收的区域只有在堆（Heap）和方法区（Method Area）中存在</p>
<p>JVM在垃圾回收时，并不是对三个区域统一回收，大部分时候都是针对新生代</p>
<ul>
<li>新生代</li>
<li>幸存区(from/to)，谁空谁是to</li>
<li><ol>
<li>每次GC都会将Eden中存活的对象移到幸存区：一旦伊甸园区被GC后，就是空的</li>
<li>复制算法</li>
</ol>
</li>
<li>老年区</li>
</ul>
<p>GC两种类型：轻GC（MinorGC）、重GC（FullGC）</p>
<p>GC题目：</p>
<ol>
<li>JVM的内存模型和分区，详细到每个区放什么</li>
<li>堆里的分区都有哪些？Eden, from, to,， 老年区，说说他们的特点</li>
<li>GC的算法有哪些？</li>
<li><ol>
<li>标记清除法</li>
<li>标记压缩</li>
<li>复制算法</li>
<li>引用计数器</li>
</ol>
</li>
<li>轻GC与重GC分别在什么时候发生</li>
</ol>
<h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><h3 id="1-引用计数法"><a href="#1-引用计数法" class="headerlink" title="1.引用计数法"></a>1.引用计数法</h3><p>对每个对象设置一个计数器，计数器本身也有消耗。当某个对象没用过时，即计数为0，则会被清除</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/2020112316282881.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/2020112316282881.png" alt="img"></a></p>
<p>现在JVM中不使用这种方法</p>
<h3 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2.复制算法"></a>2.复制算法</h3><p>当幸存from, to区里面都有东西的话，则会使用复制算法，将其中一个区中的内容复制到另外一个区域，保证to区是空的</p>
<ul>
<li>好处：没有内存碎片</li>
<li>坏处：浪费了很多内存，多了一半的空间永远是空to，假设对象（100%）成活</li>
</ul>
<p>复制算法最佳使用场景：对象存活度较低，即新生区</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/20201123162901705.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/20201123162901705.png" alt="在这里插入图片描述"></a></p>
<h3 id="3-标记清除算法"><a href="#3-标记清除算法" class="headerlink" title="3 .标记清除算法"></a>3 .标记清除算法</h3><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/20201123162919328.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/20201123162919328.png" alt="在这里插入图片描述"></a></p>
<ul>
<li>好处：不需要额外的空间</li>
<li>坏处：两次扫描，严重浪费时间，会产生内存碎片</li>
</ul>
<h3 id="4-标记清除压缩"><a href="#4-标记清除压缩" class="headerlink" title="4 .标记清除压缩"></a>4 .标记清除压缩</h3><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/20201123162923629.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/20201123162923629.png" alt="在这里插入图片描述"></a></p>
<p>可以先进行多次标记清除，再进行一次压缩，但是都无尽头</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>内存效率：复制算法&gt;标记清除&gt;标记压缩（时间复杂度）</li>
<li>内存整齐度：复制算法=标记压缩&gt;标记清除</li>
<li>内存利用率：标记压缩=标记清除&gt;复制算法</li>
</ol>
<p>思考：难道没有最优的算法吗</p>
<p>结论：没有最好的算法，但是只有每种场景下最合适的算法—————–&gt;GC：分代收集算法</p>
<p>年轻代：</p>
<ol>
<li>存活率低，使用复制算法</li>
</ol>
<p>老年代：</p>
<ol>
<li>存活率高，区域大，使用标记清除+标记压缩</li>
</ol>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>Jmm内存模型</title>
    <url>/2020/11/23/2020-11-23-Jmm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="1-什么是JMM，三个特征？"><a href="#1-什么是JMM，三个特征？" class="headerlink" title="1.什么是JMM，三个特征？"></a>1.什么是JMM，三个特征？</h3><p>Java内存模型根据官方的解释，主要是在说两个关键字，一个是<code>volatile</code>，一个是<code>synchronized</code>。</p>
<p>JMM:Java Memory Model的缩写，可见性、原子性、有序性。</p>
<h3 id="2-作用："><a href="#2-作用：" class="headerlink" title="2.作用："></a>2.作用：</h3><p>缓存一致性协议，用来定义数据读写的规则。</p>
<p>JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local Memory）。</p>
<p><strong>主内存</strong></p>
<p>主内存是所有线程都共享的，都能访问的。所有的共享变量都存储于主内存。</p>
<p><strong>工作内存</strong></p>
<p>每一个线程有自己的工作内存，工作内存只存储该线程对共享变量的副本。线程对变量的所有的操 作(读，取)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接 访问对方工作内存中的变量。</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123214141241.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123214141241.png" alt="img"></a></p>
<p>解决共享对象的线程之间的可见性问题：voliate，（当一个线程改变了主内存中a的数值，这个操作对其他线程是不可见的，使用voliate关键字，可以将线程改变后的值刷新到主内存，保证了变量a在线程之间的可见性）。voliate保证了可见性和有序性，不保证原子性。</p>
<p>JMM：抽象的概念、理论</p>
<p><strong>JMM对这八种指令的使用，制定了如下规则：</strong></p>
<ul>
<li></li>
<li><ul>
<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>
<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li>
<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>
<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li>
<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>
<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>
<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>
<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>
</ul>
</li>
</ul>
<p>JMM对这八种操作规则和对<a href="https://www.cnblogs.com/null-qige/p/8569131.html">volatile的一些特殊规则</a>就能确定哪里操作是线程安全，哪些操作是线程不安全的了。但是这些规则实在复杂，很难在实践中直接分析。所以一般我们也不会通过上述规则进行分析。更多的时候，使用java的happen-before规则来进行分析。</p>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>初探JVM---2</title>
    <url>/2020/11/23/2020-11-23-%E5%88%9D%E6%8E%A2JVM---2/</url>
    <content><![CDATA[<h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><p>凡是带了native 关键字的，说明java的作用范围达不到了，进入本地方法栈，调用底层c\c++了</p>
<p>（1）进入本地方法栈</p>
<p>（2）调用本地方法接口 JNI</p>
<p>（3）JNI作用：扩展java的使用。融合不同的编程语言为java所用，最初c、c++</p>
<p>（4）java诞生的时候，c、c++使用比较多，因此需要扩展调用c、c++程序</p>
<p>（5）他在内存区域中专门开辟了一块标记区域：Native Method Stack，登记 Native 方法</p>
<p>（6）在最终执行的时候，加载本地方法库中的方法通过JNI</p>
<p>调用其它接口：</p>
<p>（1）Socket, WebService, http</p>
<h1 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h1><p>程序计数器：Program Counter Register</p>
<p>每一个线程都有一个程序计数器，是线程私有的，指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址，也就是将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计</p>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>Method Area 方法区</p>
<p>方法区是被所有线程共享，所有字节码和方法字节码，以及一些特殊的方法，如构造函数、接口的代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，<strong>此区域属于共享区间</strong></p>
<p><strong>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</strong></p>
<p>包含：</p>
<p>static、final、Class模板、运行时常量池</p>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈：数据结构</p>
<p>程序=数据结构+算法：学习路线</p>
<p>程序=框架+业务逻辑：吃饭</p>
<p>栈：先进后出:LIFO</p>
<p>队列：先进先出:FIFO</p>
<p>例：main方法，最先进去方法区，最后结束（方法开始运行进栈，运行结束被弹出栈）</p>
<p>栈：栈内存，主管程序的运行，生命周期和线程同步</p>
<p>线程结束，栈内存就释放。对于栈来说，不存在垃圾回收问题</p>
<p>栈内：8大基本类型 + 对象引用 + 实例的方法</p>
<p>栈运行原理：栈针</p>
<p>正在执行的方法，一定位于栈的顶部</p>
<p>栈满：StackOverflowError</p>
<p>栈 + 堆 + 方法区：交互关系</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220316619.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220316619.png" alt="image-20201123220316619"></a>百度：栈的东西怎么存</p>
<p>画出对象实例化的过程</p>
<h1 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul>
<li>Sun公司 HotSpot Java HotSpot™ 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)</li>
<li>BEA JRokit 号称最快的JVM</li>
<li>IBM J9VM</li>
</ul>
<h1 id="堆Heap"><a href="#堆Heap" class="headerlink" title="堆Heap"></a>堆Heap</h1><p>一个JVM只有一个Heap，堆内存的大小是可以调节的。</p>
<p>类加载器读取了类文件后，一般会把什么东西放到堆中呢？类、方法、常量、变量，保存引用类型的真实对象</p>
<p>堆内存中还要细分三个区域：</p>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a>Native</p>
<p>凡是带了native 关键字的，说明java的作用范围达不到了，进入本地方法栈，调用底层c\c++了</p>
<p>（1）进入本地方法栈</p>
<p>（2）调用本地方法接口 JNI</p>
<p>（3）JNI作用：扩展java的使用。融合不同的编程语言为java所用，最初c、c++</p>
<p>（4）java诞生的时候，c、c++使用比较多，因此需要扩展调用c、c++程序</p>
<p>（5）他在内存区域中专门开辟了一块标记区域：Native Method Stack，登记 Native 方法</p>
<p>（6）在最终执行的时候，加载本地方法库中的方法通过JNI</p>
<p>调用其它接口：</p>
<p>（1）Socket, WebService, http</p>
<h1 id="PC寄存器-1"><a href="#PC寄存器-1" class="headerlink" title="PC寄存器"></a>PC寄存器</h1><p>程序计数器：Program Counter Register</p>
<p>每一个线程都有一个程序计数器，是线程私有的，指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址，也就是将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计</p>
<h1 id="方法区-1"><a href="#方法区-1" class="headerlink" title="方法区"></a>方法区</h1><p>Method Area 方法区</p>
<p>方法区是被所有线程共享，所有字节码和方法字节码，以及一些特殊的方法，如构造函数、接口的代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，<strong>此区域属于共享区间</strong></p>
<p><strong>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</strong></p>
<p>包含：</p>
<p>static、final、Class模板、运行时常量池</p>
<h1 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h1><p>栈：数据结构</p>
<p>程序=数据结构+算法：学习路线</p>
<p>程序=框架+业务逻辑：吃饭</p>
<p>栈：先进后出:LIFO</p>
<p>队列：先进先出:FIFO</p>
<p>例：main方法，最先进去方法区，最后结束（方法开始运行进栈，运行结束被弹出栈）</p>
<p>栈：栈内存，主管程序的运行，生命周期和线程同步</p>
<p>线程结束，栈内存就释放。对于栈来说，不存在垃圾回收问题</p>
<p>栈内：8大基本类型 + 对象引用 + 实例的方法</p>
<p>栈运行原理：栈针</p>
<p>正在执行的方法，一定位于栈的顶部</p>
<p>栈满：StackOverflowError</p>
<p>栈 + 堆 + 方法区：交互关系</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220316619.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220316619.png" alt="image-20201123220316619"></a>百度：栈的东西怎么存</p>
<p>画出对象实例化的过程</p>
<h1 id="三种JVM-1"><a href="#三种JVM-1" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul>
<li>Sun公司 HotSpot Java HotSpot™ 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)</li>
<li>BEA JRokit 号称最快的JVM</li>
<li>IBM J9VM</li>
</ul>
<h1 id="堆Heap-1"><a href="#堆Heap-1" class="headerlink" title="堆Heap"></a>堆Heap</h1><p>一个JVM只有一个Heap，堆内存的大小是可以调节的。</p>
<p>类加载器读取了类文件后，一般会把什么东西放到堆中呢？类、方法、常量、变量，保存引用类型的真实对象</p>
<p>堆内存中还要细分三个区域：</p>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a>Native</p>
<p>凡是带了native 关键字的，说明java的作用范围达不到了，进入本地方法栈，调用底层c\c++了</p>
<p>（1）进入本地方法栈</p>
<p>（2）调用本地方法接口 JNI</p>
<p>（3）JNI作用：扩展java的使用。融合不同的编程语言为java所用，最初c、c++</p>
<p>（4）java诞生的时候，c、c++使用比较多，因此需要扩展调用c、c++程序</p>
<p>（5）他在内存区域中专门开辟了一块标记区域：Native Method Stack，登记 Native 方法</p>
<p>（6）在最终执行的时候，加载本地方法库中的方法通过JNI</p>
<p>调用其它接口：</p>
<p>（1）Socket, WebService, http</p>
<h1 id="PC寄存器-2"><a href="#PC寄存器-2" class="headerlink" title="PC寄存器"></a>PC寄存器</h1><p>程序计数器：Program Counter Register</p>
<p>每一个线程都有一个程序计数器，是线程私有的，指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址，也就是将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计</p>
<h1 id="方法区-2"><a href="#方法区-2" class="headerlink" title="方法区"></a>方法区</h1><p>Method Area 方法区</p>
<p>方法区是被所有线程共享，所有字节码和方法字节码，以及一些特殊的方法，如构造函数、接口的代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，<strong>此区域属于共享区间</strong></p>
<p><strong>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</strong></p>
<p>包含：</p>
<p>static、final、Class模板、运行时常量池</p>
<h1 id="栈-2"><a href="#栈-2" class="headerlink" title="栈"></a>栈</h1><p>栈：数据结构</p>
<p>程序=数据结构+算法：学习路线</p>
<p>程序=框架+业务逻辑：吃饭</p>
<p>栈：先进后出:LIFO</p>
<p>队列：先进先出:FIFO</p>
<p>例：main方法，最先进去方法区，最后结束（方法开始运行进栈，运行结束被弹出栈）</p>
<p>栈：栈内存，主管程序的运行，生命周期和线程同步</p>
<p>线程结束，栈内存就释放。对于栈来说，不存在垃圾回收问题</p>
<p>栈内：8大基本类型 + 对象引用 + 实例的方法</p>
<p>栈运行原理：栈针</p>
<p>正在执行的方法，一定位于栈的顶部</p>
<p>栈满：StackOverflowError</p>
<p>栈 + 堆 + 方法区：交互关系</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220316619.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220316619.png" alt="image-20201123220316619"></a>百度：栈的东西怎么存</p>
<p>画出对象实例化的过程</p>
<h1 id="三种JVM-2"><a href="#三种JVM-2" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul>
<li>Sun公司 HotSpot Java HotSpot™ 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)</li>
<li>BEA JRokit 号称最快的JVM</li>
<li>IBM J9VM</li>
</ul>
<h1 id="堆Heap-2"><a href="#堆Heap-2" class="headerlink" title="堆Heap"></a>堆Heap</h1><p>一个JVM只有一个Heap，堆内存的大小是可以调节的。</p>
<p>类加载器读取了类文件后，一般会把什么东西放到堆中呢？类、方法、常量、变量，保存引用类型的真实对象</p>
<p>堆内存中还要细分三个区域：</p>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>初探JVM---3</title>
    <url>/2020/11/23/2020-11-23-%E5%88%9D%E6%8E%A2JVM---3/</url>
    <content><![CDATA[<h1 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul>
<li>Sun公司 HotSpot Java HotSpot™ 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)</li>
<li>BEA JRokit 号称最快的JVM</li>
<li>IBM J9VM</li>
</ul>
<h1 id="堆Heap"><a href="#堆Heap" class="headerlink" title="堆Heap"></a>堆Heap</h1><p>一个JVM只有一个Heap，堆内存的大小是可以调节的。</p>
<p>类加载器读取了类文件后，一般会把什么东西放到堆中呢？类、方法、常量、变量，保存引用类型的真实对象</p>
<p>堆内存中还要细分三个区域：</p>
<h2 id="新生区（伊甸园区）Young-New"><a href="#新生区（伊甸园区）Young-New" class="headerlink" title="新生区（伊甸园区）Young/New"></a>新生区（伊甸园区）Young/New</h2><p>类：诞生、成长、死亡的地方</p>
<p>伊甸园区：所有的对象都是在伊甸园区new出来的</p>
<p>幸存者（0/1）区：轻GC之后，仍然留下的对象会来到幸存者区，其中0区与1区是动态可交换的</p>
<p>当一个对象经历了15次（默认值）GC，还没有被清除，则会从新生区进入老年区</p>
<h2 id="养老区-Old"><a href="#养老区-Old" class="headerlink" title="养老区 Old"></a>养老区 Old</h2><p>重GC之后，仍然留下的对象回来到养老区</p>
<h2 id="永久区-Perm"><a href="#永久区-Perm" class="headerlink" title="永久区 Perm"></a>永久区 Perm</h2><p>这个区域常驻内存的，用来存放JDK自身携带的Class对象，Interface元数据，存储的是java运行时环境或类信息。这个区域不存在垃圾回收。关闭虚拟机就会释放永久区。</p>
<p>当一个启动类加载了大量的第三方jar包。Tomcat部署了太多的应用，大量动态生成的反射类，不断的被加载，直到内存满，就会出现OOM；</p>
<ul>
<li>JDK1.6之前：永久代，常量池在方法区中</li>
<li>JDK1.7：永久代，但是慢慢的退化了（去永久代），常量池在堆中</li>
<li>JDK1.8之后：无永久代-&gt;元空间，常量池在元空间</li>
</ul>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220614337.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123220614337.png" alt="image-20201123220614337"></a></p>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>初探JVM---4</title>
    <url>/2020/11/23/2020-11-23-%E5%88%9D%E6%8E%A2JVM---4/</url>
    <content><![CDATA[<p>GC垃圾回收主要针对伊甸园区与养老区</p>
<p>假设内存满了，OutOfMemoryError（OOM），堆内存不够</p>
<p>在JDK8以前，永久存储区有另外一个名字，叫（元空间）</p>
<p>经过研究：99%的对象都是临时对象</p>
<p>默认情况下：分配的总内存是电脑内存的1/4，而初始化的内存是电脑内存的1/64</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">堆内存调优
GC垃圾回收主要针对伊甸园区与养老区
假设内存满了，<span class="token class-name">OutOfMemoryError</span>（OOM），堆内存不够
在JDK8以前，永久存储区有另外一个名字，叫（元空间）
经过研究：<span class="token number">99</span><span class="token operator">%</span>的对象都是临时对象
默认情况下：分配的总内存是电脑内存的<span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span>，而初始化的内存是电脑内存的<span class="token number">1</span><span class="token operator">/</span><span class="token number">64</span>
<span class="token keyword">package</span> <span class="token namespace">jvm<span class="token punctuation">.</span>heapDemo</span><span class="token punctuation">;</span>
<span class="token comment">// 修改JVM堆内存的大小</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapDemo01</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// 返回虚拟机试图使用的最大内存</span>
       <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 返回jvm的初始化总内存</span>
       <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token operator">+</span>max<span class="token operator">+</span><span class="token string">"字节\t"</span><span class="token operator">+</span><span class="token punctuation">(</span>max<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// max=2107637760字节 2010.0MB</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total="</span><span class="token operator">+</span>total<span class="token operator">+</span><span class="token string">"字节\t"</span><span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// total=132120576字节 126.0MB</span>
       <span class="token comment">// 默认情况下：分配的总内存是电脑内存的1/4，而初始化的内存是电脑内存的1/64</span>
       <span class="token comment">/*
       我的java版本
       java -version
       java version "11.0.5" 2019-10-15 LTS
       Java(TM) SE Runtime Environment 18.9 (build 11.0.5+10-LTS)
       Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)
        */</span>
       <span class="token comment">/**
        * 改变堆内存的大小：
        * Run/Debug Configure-->VM Options:
        * -Xmx2000m -Xms1000m -XX:+PrintGCDetails
        *
        * 但是出警告了：
        * [0.002s][warning][gc] -XX:+PrintGCDetails is deprecated. Will use -Xlog:gc* instead.
        * 修改之后：
        * -Xmx2000m -Xms1000m -Xlog:gc*
        *
        * 注意：-Xmx的参数值>=-Xms的参数值
        * Error occurred during initialization of VM
        * Initial heap size set to a larger value than the maximum heap size
        */</span>
       <span class="token comment">/*
       运行结果：
       [0.005s][info][gc,heap] Heap region size: 1M
       [0.021s][info][gc     ] Using G1
       [0.021s][info][gc,heap,coops] Heap address: 0x0000000083000000, size: 2000 MB, Compressed Oops mode: 32-bit
       max=2097152000字节 2000.0MB
       total=1048576000字节 1000.0MB
       [0.098s][info][gc,heap,exit ] Heap
       [0.098s][info][gc,heap,exit ]  garbage-first heap   total 1024000K, used 4096K [0x0000000083000000, 0x0000000100000000)
       [0.098s][info][gc,heap,exit ]   region size 1024K, 5 young (5120K), 0 survivors (0K)
       [0.098s][info][gc,heap,exit ]  Metaspace       used 1107K, capacity 4611K, committed 4864K, reserved 1056768K
       [0.098s][info][gc,heap,exit ]   class space    used 107K, capacity 432K, committed 512K, reserved 1048576K
        */</span>
       <span class="token comment">/*
       当遇到OOM时：
       1. 尝试扩大堆内存，当仍出错时，说明代码有问题
       2. 分析内存，看一下那个地方出现了问题
        */</span>
       <span class="token comment">/*
       对于java8：一般来说，新生代+老年代的内存=堆最大内存
       因此，元空间的内存并不存在堆区，所以说：元空间 逻辑上存在，物理上不存在
       对于java11：只有garbage-first,内存为1024000K=1024MB,等于jvm的初始化总内存的大小，因此Metaspace仍然不存在于堆内存中
        */</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
在项目中出现了OOM故障
能够看到第几行出错：内存快照分析工具，MAT，<span class="token class-name">Jprofiler</span>
<span class="token class-name">Dedug</span>，一行行分析代码
MAT，<span class="token class-name">Jprofiler</span>作用：
分析<span class="token class-name">Dump</span>文件，快速定位内存泄漏；
获得堆中的数据
获得大的对象
需要安装<span class="token class-name">JProfiler</span>
<span class="token comment">/**
* 设置大小，并将OOMError下载下来
* -Xms10m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMDemo01</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 1MB</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 问题所在</span>
               count<span class="token operator">++</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> oom<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
           oom<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 10M大小，共运行了9次</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Java</span> heap space
<span class="token class-name">Dumping</span> heap <span class="token keyword">to</span> <span class="token namespace">java_pid4648<span class="token punctuation">.</span>hprof</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Heap</span> dump file created <span class="token punctuation">[</span><span class="token number">12627317</span> bytes in <span class="token number">0.023</span> secs<span class="token punctuation">]</span>
<span class="token number">9</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Java</span> heap space
at <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span>heapDemo<span class="token punctuation">.</span></span>OOMDemo01</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">OOMDemo01</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span>
at <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span>heapDemo<span class="token punctuation">.</span></span>OOMDemo01</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OOMDemo01</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span>
在这里插入图片描述堆内存调优
GC垃圾回收主要针对伊甸园区与养老区
假设内存满了，<span class="token class-name">OutOfMemoryError</span>（OOM），堆内存不够
在JDK8以前，永久存储区有另外一个名字，叫（元空间）
经过研究：<span class="token number">99</span><span class="token operator">%</span>的对象都是临时对象
默认情况下：分配的总内存是电脑内存的<span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span>，而初始化的内存是电脑内存的<span class="token number">1</span><span class="token operator">/</span><span class="token number">64</span>
<span class="token keyword">package</span> <span class="token namespace">jvm<span class="token punctuation">.</span>heapDemo</span><span class="token punctuation">;</span>
<span class="token comment">// 修改JVM堆内存的大小</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapDemo01</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// 返回虚拟机试图使用的最大内存</span>
       <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 返回jvm的初始化总内存</span>
       <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token operator">+</span>max<span class="token operator">+</span><span class="token string">"字节\t"</span><span class="token operator">+</span><span class="token punctuation">(</span>max<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// max=2107637760字节 2010.0MB</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total="</span><span class="token operator">+</span>total<span class="token operator">+</span><span class="token string">"字节\t"</span><span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// total=132120576字节 126.0MB</span>
       <span class="token comment">// 默认情况下：分配的总内存是电脑内存的1/4，而初始化的内存是电脑内存的1/64</span>
       <span class="token comment">/*
       我的java版本
       java -version
       java version "11.0.5" 2019-10-15 LTS
       Java(TM) SE Runtime Environment 18.9 (build 11.0.5+10-LTS)
       Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)
        */</span>
       <span class="token comment">/**
        * 改变堆内存的大小：
        * Run/Debug Configure-->VM Options:
        * -Xmx2000m -Xms1000m -XX:+PrintGCDetails
        *
        * 但是出警告了：
        * [0.002s][warning][gc] -XX:+PrintGCDetails is deprecated. Will use -Xlog:gc* instead.
        * 修改之后：
        * -Xmx2000m -Xms1000m -Xlog:gc*
        *
        * 注意：-Xmx的参数值>=-Xms的参数值
        * Error occurred during initialization of VM
        * Initial heap size set to a larger value than the maximum heap size
        */</span>
       <span class="token comment">/*
       运行结果：
       [0.005s][info][gc,heap] Heap region size: 1M
       [0.021s][info][gc     ] Using G1
       [0.021s][info][gc,heap,coops] Heap address: 0x0000000083000000, size: 2000 MB, Compressed Oops mode: 32-bit
       max=2097152000字节 2000.0MB
       total=1048576000字节 1000.0MB
       [0.098s][info][gc,heap,exit ] Heap
       [0.098s][info][gc,heap,exit ]  garbage-first heap   total 1024000K, used 4096K [0x0000000083000000, 0x0000000100000000)
       [0.098s][info][gc,heap,exit ]   region size 1024K, 5 young (5120K), 0 survivors (0K)
       [0.098s][info][gc,heap,exit ]  Metaspace       used 1107K, capacity 4611K, committed 4864K, reserved 1056768K
       [0.098s][info][gc,heap,exit ]   class space    used 107K, capacity 432K, committed 512K, reserved 1048576K
        */</span>
       <span class="token comment">/*
       当遇到OOM时：
       1. 尝试扩大堆内存，当仍出错时，说明代码有问题
       2. 分析内存，看一下那个地方出现了问题
        */</span>
       <span class="token comment">/*
       对于java8：一般来说，新生代+老年代的内存=堆最大内存
       因此，元空间的内存并不存在堆区，所以说：元空间 逻辑上存在，物理上不存在
       对于java11：只有garbage-first,内存为1024000K=1024MB,等于jvm的初始化总内存的大小，因此Metaspace仍然不存在于堆内存中
        */</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
在项目中出现了OOM故障
能够看到第几行出错：内存快照分析工具，MAT，<span class="token class-name">Jprofiler</span>
<span class="token class-name">Dedug</span>，一行行分析代码
MAT，<span class="token class-name">Jprofiler</span>作用：
分析<span class="token class-name">Dump</span>文件，快速定位内存泄漏；
获得堆中的数据
获得大的对象
需要安装<span class="token class-name">JProfiler</span>
<span class="token comment">/**
* 设置大小，并将OOMError下载下来
* -Xms10m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMDemo01</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 1MB</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 问题所在</span>
               count<span class="token operator">++</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> oom<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
           oom<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 10M大小，共运行了9次</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Java</span> heap space
<span class="token class-name">Dumping</span> heap <span class="token keyword">to</span> <span class="token namespace">java_pid4648<span class="token punctuation">.</span>hprof</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Heap</span> dump file created <span class="token punctuation">[</span><span class="token number">12627317</span> bytes in <span class="token number">0.023</span> secs<span class="token punctuation">]</span>
<span class="token number">9</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Java</span> heap space
at <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span>heapDemo<span class="token punctuation">.</span></span>OOMDemo01</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">OOMDemo01</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span>
at <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span>heapDemo<span class="token punctuation">.</span></span>OOMDemo01</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OOMDemo01</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span>
在这里插入图片描述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在项目中出现了OOM故障</p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>初探JVM</title>
    <url>/2020/11/23/2020-11-23-%E5%88%9D%E6%8E%A2JVM/</url>
    <content><![CDATA[<h1 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1. JVM的位置"></a>1. JVM的位置</h1><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215348517.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215348517.png" alt="img"></a></p>
<h1 id="2-JVM的体系结构"><a href="#2-JVM的体系结构" class="headerlink" title="2. JVM的体系结构"></a>2. JVM的体系结构</h1><p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215515209.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215515209.png" alt="image-20201123215515209"></a></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215543414.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215543414.png" alt="image-20201123215543414"></a></p>
<h1 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h1><p>作用：加载class文件</p>
<ul>
<li><p>new Student();</p>
<p>将抽象类Student实例化，其引用在栈里，实例放在堆里</p>
<p>类是抽象的，对象是具体的</p>
</li>
</ul>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215616533.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215616533.png" alt="image-20201123215616533"></a></p>
<ol>
<li>虚拟机自带的加载器</li>
<li>启动类（根）加载器</li>
<li>扩展类加载器</li>
<li>应用类加载器</li>
</ol>
<p>作业：1. 自己画类加载机制</p>
<p>\2. 百度双亲委派机制</p>
<h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p><strong>概念：</strong>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 java.lang.Class对象，用来封装类在方法区内的数据结构。</p>
<ol>
<li><p>在什么时候才会启动类加载器？</p>
<p>其实，类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p>
</li>
<li><p>从哪个地方去加载.class文件</p>
<p>在这里进行一个简单的分类。例举了5个来源</p>
<p>（1）本地磁盘</p>
<p>（2）网上加载.class文件（Applet）</p>
<p>（3）从数据库中</p>
<p>（4）压缩文件中（ZAR，jar等）</p>
<p>（5）从其他文件生成的（JSP应用）</p>
</li>
</ol>
<h2 id="3-2-类加载过程"><a href="#3-2-类加载过程" class="headerlink" title="3.2 类加载过程"></a>3.2 类加载过程</h2><p>类生存周期：加载至虚拟机内存—&gt;卸载出内存</p>
<p>包含了：加载、验证、准备、解析、初始化、使用、卸载</p>
<p>类的加载：加载、验证、准备、解析、初始化</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215645320.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215645320.png" alt="image-20201123215645320"></a></p>
<p><strong>1. 加载</strong></p>
<p>三件事：</p>
<p>（1）通过一个类的全限定名来获取其定义的二进制字节流</p>
<p>（2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>
<p>（3）在堆中生成一个代表这个类的Class对象，作为方法区中这些数据的访问接口</p>
<p>程序员可以使用系统的类加载器加载，还可以使用自己的类加载器加载</p>
<p><strong>2. 验证</strong></p>
<p>作用：确保加载类的正确性</p>
<p>四步：</p>
<p>（1）验证文件格式：验证 .class 文件字节流是否符合class文件的格式规范，并且能够被当前版本的虚拟机处理。主要校验：魔数、主版本号、常量池等</p>
<p>（2）验证元数据：对字节码描述的信息进行语义分析，保证信息符合java语言规范要求。例：此类是否有父类，字段方法是否与父类冲突等</p>
<p>（3）验证字节码：最复杂阶段。分析数据流与控制流，确定语义是否合法及符合逻辑。对类的方法进行验证。</p>
<p>（4）验证符号引用：发生在虚拟机将符号引用转化为直接引用的时候。主要对类自身以外的信息进行校验。目的在于确保解析动作能够完成。</p>
<p><strong>3. 准备</strong></p>
<p>作用：为<strong>类变量</strong>分配内存并设置<strong>初始值</strong></p>
<p>注意：</p>
<p>（1）类变量(static)会分配内存，但是实例变量不会，实例变量主要随对象实例化才会一起分配到java堆中</p>
<p>（2）初始值指数据类型默认值</p>
<p>static final为初始值，非默认值</p>
<p><strong>4. 解析</strong></p>
<p>作用：JVM将常量池中的<strong>符号引用</strong>转化为<strong>直接引用</strong></p>
<p>符号引用：标签</p>
<p>直接引用：指针、相对偏移量、直接或间接定位到目标的句柄。与虚拟机实现的内存有关</p>
<p>解析主要针对：类或接口、字段、类方法、接口方法、方法类型、方法句柄、调用点限定符 7类符号引用</p>
<p><strong>5. 初始化</strong></p>
<p>作用：执行类构造器()方法</p>
<p>设定初始值：</p>
<p>（1）声明类变量时指定初始值</p>
<p>（2）使用静态代码块为类变量指定初始值</p>
<p>JVM初始化步骤：</p>
<p>（1）假如类未被加载和链接，则加载并连接该类</p>
<p>（2）假如类的直接父类未被初始化，则初始化器直接父类</p>
<p>（3）假如类中存在初始化语句，则依次执行初始化语句</p>
<h2 id="3-3-类初始化时机"><a href="#3-3-类初始化时机" class="headerlink" title="3.3 类初始化时机"></a>3.3 类初始化时机</h2><p><strong>主动使用类</strong>的时候才会初始化类，主动使用分为6种</p>
<p>（1）创建类实例，即new</p>
<p>（2）访问类或接口的静态变量，或对静态变量赋值</p>
<p>（3）调用类的静态方法</p>
<p>（4）反射（Class.forName(“com.shengsiyuan.Test”)）</p>
<p>（5）初始化类的子类，则其父类也会被初始化</p>
<p>（6）JVM虚拟机中的启动类</p>
<h2 id="3-4-类加载器"><a href="#3-4-类加载器" class="headerlink" title="3.4 类加载器"></a>3.4 类加载器</h2><p>位置：类加载器位于JVM的外部，方便程序员决定如何获取所需的类</p>
<p><strong>1. 系统自带的三个加载器</strong>：</p>
<p>（1）Bootstrap ClassLoader：启动类（根）加载器</p>
<p>（2）Extention ClassLoader：扩展类加载器</p>
<p>（3）Appclass Loader：应用类加载器</p>
<p>加载顺序：APP（应用类加载器）&lt; EXC （扩展类加载器）&lt; BOOT（启动类（根）加载器）</p>
<p>层次关系：</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215723621.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201123215723621.png" alt="image-20201123215723621"></a></p>
<p><strong>2. 类加载的三种方式</strong></p>
<p>（1）通过命令行启动启动应用时由JVM初始化加载含有main()方法的主类</p>
<p>（2）通过Class.forName()方法动态加载，会默认执行初始化块（static{}），但是Class.forName(name, initialize, loader)中的initlize可指定是否要执行初始化块</p>
<p>（3）通过ClassLoader.loadClass()方法动态加载，不会执行初始化块</p>
<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis对于MySQL8.0的配置</title>
    <url>/2020/11/25/2020-11-25-mybatis%E5%AF%B9%E4%BA%8EMySQL8.0%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>版本的不同，8.0的驱动和url变为：<br><strong>com.mysql.cj.jdbc.Driver</strong></p>
<p><strong>jdbc:mysql://localhost:3306/firstsql?characterEncoding=utf-8&amp;&amp;serverTimezone=UTC&amp;&amp;useSSL=false</strong></p>
<p>驱动：*<strong>jar：mysql-connector-java-8.0.11.jar*</strong></p>
<p>但在****mybatis****中用以上配置报错：</p>
<p><strong>对实体 “serverTimezone” 的引用必须以 ‘;’ 分隔符结尾。</strong><br>解决方法：<br>改为&amp;；<br>useUnicode=true&amp;；serverTimezone=GMT&amp;；useSSL=fals</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;
&lt;!-- 后面的参数不能省略，&amp;符号需要使用&quot;&amp; amp;&quot;转义（注意中间没有空格） --&gt;
&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;firstsql?useUnicode&#x3D;true&amp;serverTimezone&#x3D;GMT&amp;useSSL&#x3D;false&quot;&#x2F;&gt;
&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;
&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;*********&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/12/19/2020-12-19-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
<p>◆核心本质:<br>◆实例化对象不使用new，用工厂方法代替<br>◆将选择实现类，创建对象统一管理和控制从而将调用者跟我们的实现类解耦。</p>
<p>◆简单工ㄏ模式<br>◆用来生产同一等级结构中的任意产品（对于增加新的产品，需要扩展已有代码）</p>
<p>◆工厂方法模式<br>◆用来生产同一等级结构中的固定产品（支持增加任意产品）</p>
<p><strong>简单工厂模式:</strong></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201219205340161.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201219205340161.png" alt="image-20201219205340161"></a></p>
<p>1.定义一个接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.定义一个车工厂类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span>
<span class="token comment">//静态工厂模式</span>
<span class="token comment">//增加一个新的产品，如果你不修改代码，做不到！</span>
<span class="token comment">//不是开闭原则</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token class-name">String</span> car<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"五菱"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WuLing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tesla</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.特斯拉车</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tesla</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.五菱宏光车</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WuLing</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"五菱宏光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.实现类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//接口，所有的实现类, 工厂</span>
       <span class="token comment">// Car car = new WuLing();</span>
        <span class="token comment">//Car car2 = new Tesla();</span>
       <span class="token comment">//2.使用工厂创建</span>
       <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token class-name">CarFactory</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token string">"五菱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Car</span> car2 <span class="token operator">=</span> <span class="token class-name">CarFactory</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car2<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>工厂方法模式:</strong></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201219212140425.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201219212140425.png" alt="image-20201219212140425"></a>1.接口定义</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token comment">//工厂方法模式</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.摩拜单车</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoBai</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"摩拜单车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.摩拜单车工厂</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoBaiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MoBai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.特斯拉</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tesla</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.特斯拉工厂</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeslaFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tesla</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7.五菱宏光</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WuLing</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"五菱宏光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>8.五菱宏光工厂</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WuLingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WuLing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9.实现类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">factory<span class="token punctuation">.</span>simple<span class="token punctuation">.</span></span><span class="token class-name">CarFactory</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WuLingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Car</span> car2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeslaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car2<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Car</span> car3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoBaiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car3<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//总结：</span>
        <span class="token comment">//结构复杂度：   使用simple简单工厂</span>
        <span class="token comment">//代码复杂度：   使用simple...</span>
        <span class="token comment">//编程复杂度：   使用simple...</span>
        <span class="token comment">//管理上的复杂度: 使用simple...</span>
        <span class="token comment">//根据设计原则：工厂方法模式</span>
        <span class="token comment">//根据实际业务：简单工厂模式</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>小结:<br>◆简单工厂模式（静态工厂模式）<br>虽然某种程度上不符合设计原则，但实际使用最多！<br>◆工厂方法模式<br>不修改已有类的前提下，通过增加新的工厂类实现扩展。<br>◆抽象工厂模式<br>不可以增加产品，可以增加产品族！<br>◆应用场景:<br>JDK CalendargetInstance中的方法<br>JDBC中 Connection的对象的获取◆ Spring中lo容器创建管理bean对象◆反射中 Classnewlnstance对象的方法</p>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2020/12/20/2020-12-20-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>
<p><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p>
<p><strong>主要解决：</strong>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p>
<p><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候。</p>
<p><strong>如何解决：</strong>将变与不变分离开。</p>
<p><strong>关键代码：</strong>建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p>
<p><strong>应用实例：</strong> 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。</p>
<p><strong>优点：</strong> 1、建造者独立，易扩展。 2、便于控制细节风险。</p>
<p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p>
<p><strong>使用场景：</strong> 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</p>
<p><strong>注意事项：</strong>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>
<h3 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a><strong>第一种方法：</strong></h3><p>1.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token comment">//抽象的建造者：方法</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地基</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//钢筋工程</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//铺电线</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//粉刷</span>

    <span class="token comment">//完工：得到产品</span>
    <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">buildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildA</span><span class="token punctuation">(</span><span class="token string">"地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">buildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildB</span><span class="token punctuation">(</span><span class="token string">"钢筋工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"钢筋工程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">buildC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildC</span><span class="token punctuation">(</span><span class="token string">"铺电线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"铺电线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">buildD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildD</span><span class="token punctuation">(</span><span class="token string">"粉刷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"粉刷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token comment">//产品：房子</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> buildA<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> buildB<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> buildC<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> buildD<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> buildA<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildA</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buildA <span class="token operator">=</span> buildA<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> buildB<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildB</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buildB <span class="token operator">=</span> buildB<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> buildC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildC</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildC<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buildC <span class="token operator">=</span> buildC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> buildD<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildD</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buildD <span class="token operator">=</span> buildD<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Product&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"buildA='"</span> <span class="token operator">+</span> buildA <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", buildB='"</span> <span class="token operator">+</span> buildB <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", buildC='"</span> <span class="token operator">+</span> buildC <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", buildD='"</span> <span class="token operator">+</span> buildD <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token comment">//指挥：核心。负责指挥构建一个工程，工程如何构建，由它决定</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span><span class="token function">buildD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//可以调换</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//指挥</span>
        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指挥 具体的工人完成 产品</span>
        <span class="token class-name">Product</span> build <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201220210858474.png" alt="image-20201220210858474"></p>
<h3 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a><strong>第二种方法：</strong></h3><p>第二种方法可以自定义想要的套餐</p>
<p>1.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span>

<span class="token comment">//建造者</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">abstract</span> <span class="token class-name">Builder</span> <span class="token function">buildA</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//汉堡</span>
    <span class="token keyword">abstract</span> <span class="token class-name">Builder</span> <span class="token function">buildB</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可乐</span>
    <span class="token keyword">abstract</span> <span class="token class-name">Builder</span> <span class="token function">buildC</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//薯片</span>
    <span class="token keyword">abstract</span> <span class="token class-name">Builder</span> <span class="token function">buildD</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//甜点</span>

    <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span>

<span class="token comment">//具体的建造者</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Builder</span> <span class="token function">buildA</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildA</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Builder</span> <span class="token function">buildB</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildB</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Builder</span> <span class="token function">buildC</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildC</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Builder</span> <span class="token function">buildD</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        product<span class="token punctuation">.</span><span class="token function">setBuildD</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span>

<span class="token comment">//产品: 套餐</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">BuildA</span> <span class="token operator">=</span> <span class="token string">"汉堡"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">BuildB</span> <span class="token operator">=</span> <span class="token string">"可乐"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">BuildC</span> <span class="token operator">=</span> <span class="token string">"薯片"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">BuildD</span> <span class="token operator">=</span> <span class="token string">"甜点"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">BuildA</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildA</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuildA</span> <span class="token operator">=</span> buildA<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">BuildB</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildB</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuildB</span> <span class="token operator">=</span> buildB<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">BuildC</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildC</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildC<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuildC</span> <span class="token operator">=</span> buildC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBuildD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">BuildD</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildD</span><span class="token punctuation">(</span><span class="token class-name">String</span> buildD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuildD</span> <span class="token operator">=</span> buildD<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Product&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"BuildA='"</span> <span class="token operator">+</span> <span class="token class-name">BuildA</span> <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", BuildB='"</span> <span class="token operator">+</span> <span class="token class-name">BuildB</span> <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", BuildC='"</span> <span class="token operator">+</span> <span class="token class-name">BuildC</span> <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", BuildD='"</span> <span class="token operator">+</span> <span class="token class-name">BuildD</span> <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">builder<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//服务员</span>
        <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//链式编程：在原来的基础上，可以自由组合，如果不组合，也有默认的套餐</span>
        <span class="token class-name">Product</span> product <span class="token operator">=</span> worker<span class="token punctuation">.</span><span class="token function">buildA</span><span class="token punctuation">(</span><span class="token string">"全家桶"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildB</span><span class="token punctuation">(</span><span class="token string">"雪碧"</span><span class="token punctuation">)</span>       
        <span class="token comment">//通过.build~ ...自定义</span>
                <span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201220211624407.png" alt="image-20201220211624407"></p>
<p>1</p>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2020/12/20/2020-12-20-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://space.bilibili.com/95256449">遇见狂神说</a></p>
<p>**定义:**抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类</p>
<p><strong>不可以增加产品，可以增加产品族！</strong></p>
<p><strong>适用场景:</strong></p>
<blockquote>
<p>◆ 客户端（应用层）不依赖于产品类实例如何被创建、实现等细节<br>◆ 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码<br>◆ 提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现</p>
</blockquote>
<p><strong>优点:</strong></p>
<blockquote>
<p>◆ 具体产品在应用层的代码隔离，无需关心创建的细节<br>◆ 将一个系列的产品统一到一起创建</p>
</blockquote>
<p><strong>缺点:</strong></p>
<blockquote>
<p>◆ 规定了所有可能被创建的产品集合，产品族中扩展新的产品困难；<br>◆ 增加了系统的抽象性和理解难度</p>
</blockquote>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/QQ%E5%9B%BE%E7%89%8720201220005949.jpg"><img src="https://gitee.com/ming0419/tuchuang/raw/master/QQ%E5%9B%BE%E7%89%8720201220005949.jpg" alt="QQ图片20201220005949"></a></p>
<p>1.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//手机产品接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IphoneProduct</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//路由器产品接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRouterProduct</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">openWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//抽象产品工厂</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProductFactory</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//生产手机</span>
    <span class="token class-name">IphoneProduct</span> <span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//生产路由器</span>
    <span class="token class-name">IRouterProduct</span> <span class="token function">routerProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//生产笔记本...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.华为手机</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//华为手机</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IphoneProduct</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.华为路由器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//华为路由器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiRouter</span> <span class="token keyword">implements</span> <span class="token class-name">IRouterProduct</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动华为路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭华为路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开华为网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.华为工厂</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IProductFactory</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IphoneProduct</span> <span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IRouterProduct</span> <span class="token function">routerProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7.小米手机</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//小米手机</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IphoneProduct</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启小米手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭小米手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>8.小米路由器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token comment">//小米路由器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiRouter</span> <span class="token keyword">implements</span> <span class="token class-name">IRouterProduct</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动小米路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭小米路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开小米网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9.小米工厂</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IProductFactory</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IphoneProduct</span> <span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IRouterProduct</span> <span class="token function">routerProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>10.实现类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">factory<span class="token punctuation">.</span>abstract1</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============小米系列产品=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//小米工厂</span>
        <span class="token class-name">XiaomiFactory</span> xiaomiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//小米手机</span>
        <span class="token class-name">IphoneProduct</span> iphoneProduct <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iphoneProduct<span class="token punctuation">.</span><span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iphoneProduct<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iphoneProduct<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//小米路由</span>
        <span class="token class-name">IRouterProduct</span> iRouterProduct <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">routerProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iRouterProduct<span class="token punctuation">.</span><span class="token function">openWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iRouterProduct<span class="token punctuation">.</span><span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============华为系列产品=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//华为工厂</span>
        <span class="token class-name">HuaweiFactory</span> huaweiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//华为手机</span>
        iphoneProduct <span class="token operator">=</span> huaweiFactory<span class="token punctuation">.</span><span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iphoneProduct<span class="token punctuation">.</span><span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iphoneProduct<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iphoneProduct<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//华为路由</span>
        iRouterProduct <span class="token operator">=</span> huaweiFactory<span class="token punctuation">.</span><span class="token function">routerProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iRouterProduct<span class="token punctuation">.</span><span class="token function">openWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iRouterProduct<span class="token punctuation">.</span><span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/image-20201220011203030.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201220011203030.png" alt="image-20201220011203030"></a></p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/QQ%E5%9B%BE%E7%89%8720201220010052-1608397955459.jpg"><img src="https://gitee.com/ming0419/tuchuang/raw/master/QQ%E5%9B%BE%E7%89%8720201220010052-1608397955459.jpg" alt="QQ图片20201220010052"></a></p>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
  </entry>
  <entry>
    <title>Win10下mysql 8.0的安装</title>
    <url>/2021/01/24/2021-01-24-Win10%E4%B8%8Bmysql-8.0%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="一-去官网下载MySQL-地址-https-www-mysql-com"><a href="#一-去官网下载MySQL-地址-https-www-mysql-com" class="headerlink" title="一 .去官网下载MySQL 地址:https://www.mysql.com/"></a>一 .去官网下载MySQL 地址:<a href="https://www.mysql.com/">https://www.mysql.com/</a></h4><p><strong>1.</strong></p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124200604308.png" alt="image-20210124200604308"></p>
<p><strong>2.</strong></p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124200721439.png" alt="image-20210124200721439"></p>
<p><strong>3.</strong></p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124200904779.png" alt="image-20210124200904779"></p>
<h4 id="二-解压完成后在其解压目录新建一个my-ini文件"><a href="#二-解压完成后在其解压目录新建一个my-ini文件" class="headerlink" title="二.解压完成后在其解压目录新建一个my.ini文件"></a>二.解压完成后在其解压目录新建一个my.ini文件</h4><p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124201259036.png" alt="image-20210124201259036"></p>
<p>在my.ini文件中输入：</p>
<p><code>注意：basedir和datadir的目录是你自己的</code></p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]
# 设置3306端口
port&#x3D;3306
# 设置mysql的安装目录
basedir&#x3D;C:\mysql\mysql-8.0.23-winx64
# 设置mysql数据库的数据的存放目录
datadir&#x3D;C:\mysql\mysql-8.0.23-winx64\data
# 允许最大连接数
max_connections&#x3D;200
# 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统
max_connect_errors&#x3D;10
# 服务端使用的字符集默认为UTF8
character-set-server&#x3D;utf8
# 创建新表时将使用的默认存储引擎
default-storage-engine&#x3D;INNODB
# 默认使用“mysql_native_password”插件认证
default_authentication_plugin&#x3D;mysql_native_password
[mysql]
# 设置mysql客户端默认字符集
default-character-set&#x3D;utf8
[client]
# 设置mysql客户端连接服务端时默认使用的端口
port&#x3D;3306
default-character-set&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="三-设置环境变量"><a href="#三-设置环境变量" class="headerlink" title="三.设置环境变量"></a>三.设置环境变量</h4><p>1.新建系统变量，变量值为路径，根据自己情况设置</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124202033542.png" alt="image-20210124202033542"></p>
<p>2.然后在系统变量的path中加入</p>
<pre class="line-numbers language-none"><code class="language-none">%MYSQL_HOME%\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124202433657.png" alt="image-20210124202433657"></p>
<h4 id="四-初始化并启动"><a href="#四-初始化并启动" class="headerlink" title="四.初始化并启动"></a>四.初始化并启动</h4><p>1.以<code>管理员身份</code>打开cmd，cd到mysql文件夹的bin目录下，</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124203039867.png" alt="image-20210124203039867"></p>
<p>2.初始化，会打印数据库密码，记住该密码，后面会用到</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqld --initialize --console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124203419525.png" alt="image-20210124203419525"></p>
<p>打印的密码</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124203727065.png" alt="image-20210124203727065"></p>
<p>3.安装MySQL服务：</p>
<pre class="line-numbers language-none"><code class="language-none">mysqld --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124204043475.png" alt="image-20210124204043475"></p>
<p>出现：Service successfully installed.  说明成功</p>
<p>4.启动 停止 卸载 MySQL 服务命令：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">启动服务器命令为：　　net start mysql
停止服务命令：　　net stop mysql
卸载 <span class="token class-name">MySQL</span> 服务命令：　　sc delete mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210124204819014.png" alt="image-20210124204819014"></p>
<p>5.登陆数据库，输入刚才打印的密码</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/QQ%E5%9B%BE%E7%89%8720210124212741.jpg" alt="QQ图片20210124212741"></p>
<p>6.修改初始密码</p>
<p>使用命令： ALTER USER ‘root’@‘localhost’ IDENTIFIED BY ‘新密码’;<br>注意密码一定要6位数以上<br>比如我设置的密码是123456</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">mysql<span class="token operator">></span>ALTER user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456'</span>
    <span class="token operator">-></span> <span class="token punctuation">;</span>
<span class="token class-name">Query</span> OK<span class="token punctuation">,</span> <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7.使用新密码登陆</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/QQ%E5%9B%BE%E7%89%8720210124212741.jpg" alt="QQ图片20210124212741"></p>
<p>OK了</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql找不到服务</title>
    <url>/2021/02/01/2021-02-01-Mysql%E6%89%BE%E4%B8%8D%E5%88%B0%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h4 id="MySQL已安装，因长时间不用，不在服务列表中，无法启动，解决办法："><a href="#MySQL已安装，因长时间不用，不在服务列表中，无法启动，解决办法：" class="headerlink" title="MySQL已安装，因长时间不用，不在服务列表中，无法启动，解决办法："></a>MySQL已安装，因长时间不用，不在服务列表中，无法启动，解决办法：</h4><p>1.以管理员身份执行cmd；</p>
<p>2.切换到mysql安装目录下的bin目录，执行<strong>mysqld.exe –install</strong>命令，看到service successfully installed.表示安装服务成功。</p>
<p>3.开启服务：<code>net start mysql</code></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA中resources资源导出失败的问题</title>
    <url>/2021/02/03/2021-02-03-IDEA%E4%B8%ADresources%E8%B5%84%E6%BA%90%E5%AF%BC%E5%87%BA%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>1.如果在IDEA中发现自己的resources文件无法导出，可以在<strong>当前项目的pom.xml文件</strong>中添加如下的代码</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 2.如果还是不行，把  <code>&lt;filtering&gt;true&lt;/filtering&gt;</code>改为  <code>&lt;filtering&gt;false&lt;/filtering&gt;</code></p>
]]></content>
      <categories>
        <category>error</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA报org.testng.TestNGException:错误</title>
    <url>/2021/02/03/2021-02-03-IDEA%E6%8A%A5org.testng.TestNGException-%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>1.原因：没有注入testng的依赖</p>
<p>2.查看pom.xml更改为<code>&lt;version&gt;7.0.0-beta7&lt;/version&gt;</code></p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20210203055346551.png"></p>
]]></content>
      <categories>
        <category>error</category>
      </categories>
  </entry>
  <entry>
    <title>Email</title>
    <url>/2021/03/03/2021-03-03-Email/</url>
    <content><![CDATA[<p>   <strong><a href="mailto:&#76;&#x69;&#100;&#52;&#49;&#x39;&#64;&#121;&#x65;&#97;&#x68;&#46;&#x6e;&#x65;&#x74;">&#76;&#x69;&#100;&#52;&#49;&#x39;&#64;&#121;&#x65;&#97;&#x68;&#46;&#x6e;&#x65;&#x74;</a></strong></p>
<p>   <strong><a href="mailto:&#49;&#x39;&#50;&#48;&#52;&#x34;&#x39;&#49;&#50;&#x38;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;">&#49;&#x39;&#50;&#48;&#52;&#x34;&#x39;&#49;&#50;&#x38;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>mysql解决不能使用中文问题</title>
    <url>/2020/04/06/mysql%20%E8%A7%A3%E5%86%B3%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><span class="md-expand" md-inline="strong" style="box-sizing: border-box;"><strong>修改字符集</strong></span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">打开cmd登录数据库</span></p>
<p><span class="md-image md-img-loaded" data-src="https://kite01.club/zb_users/upload/2020/04/202004071586189236252207.png" md-inline="image" style="box-sizing: border-box; min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; vertical-align: top; display: inline-block; width: 800.025px;"><img src="https://gitee.com/ming0419/tuchuang/raw/master/3.png"></span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">输入 show variables like ‘char%’; 查看mysql安装路径</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">一般情况下默认编码为gbk ，要修改为utf8</span></p>
<p><span class="md-image md-img-loaded" data-src="https://kite01.club/zb_users/upload/2020/04/202004071586192420430090.png" md-inline="image" style="box-sizing: border-box; min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; vertical-align: top; display: inline-block; width: 800.025px;"><img src="https://gitee.com/ming0419/tuchuang/raw/master/1.png"></span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">找到路径下的my.ini文件</span></p>
<p><span class="md-image md-img-loaded" data-src="https://kite01.club/zb_users/upload/2020/04/202004071586189874129301.png" md-inline="image" style="box-sizing: border-box; min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; vertical-align: top; display: inline-block; width: 800.025px;"><img src="https://gitee.com/ming0419/tuchuang/raw/master/2.png"></span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">如果找不到my.ini文件可能在C:\ProgramData\MySQL\MySQL Server 8.0目录下</span></p>
<p><span class="" md-inline="strong" style="box-sizing: border-box;"><strong>修改my.ini文件为</strong></span></p>
<div cid="n12" class="md-hr md-end-block" mdtype="hr" style="box-sizing: border-box; color: rgb(51, 51, 51); font-family: "Open Sans", "Clear Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; white-space: normal;" tabindex="-1">- - - - - -

</div><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">\[mysqld\]</span>

<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 设置3306端口</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">port=3306</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 设置mysql的安装目录</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">basedir=C:\Program Files\MySQL\MySQL Server 8.0</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 设置mysql数据库的数据的存放目录 \data不能删除</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">datadir=C:\Program Files\MySQL\MySQL Server 8.0\data</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 允许最大连接数</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">max_connections=200</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">max_connect_errors=10</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 服务端使用的字符集默认为UTF8</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">character-set-server=utf8</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 创建新表时将使用的默认存储引擎</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">default-storage-engine=INNODB</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 默认使用“mysql_native_password”插件认证</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">default_authentication_plugin=mysql_native_password</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">[mysql]</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 设置mysql客户端默认字符集</span></p>
<p><span class="md-plain md-expand" md-inline="plain" style="box-sizing: border-box;">default-character-set=utf8</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">[client]</span></p>
<p><span md-inline="escape" style="box-sizing: border-box;">#</span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;"> 设置mysql客户端连接服务端时默认使用的端口</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">port=3306</span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">default-character-set=utf8</span></p>
<div cid="n38" class="md-hr md-end-block" mdtype="hr" style="box-sizing: border-box; color: rgb(51, 51, 51); font-family: "Open Sans", "Clear Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; white-space: normal;" tabindex="-1">- - - - - -

</div><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">\*\*</span><span class="md-softbreak" md-inline="softbreak" style="box-sizing: border-box;"></span><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">\*\*</span>

<p><span class="" md-inline="strong" style="box-sizing: border-box;"><strong>这个my.ini文件要在mysql安装目录下，如：C:\Program Files\MySQL\MySQL Server 8.0</strong></span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">登录数据库输入 show variables like ‘char%’; 查看为</span></p>
<p><span class="md-image md-img-loaded" data-src="https://kite01.club/zb_users/upload/2020/04/202004071586190722913846.png" md-inline="image" style="box-sizing: border-box; min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; vertical-align: top; display: inline-block; width: 800.025px;"><img src="https://gitee.com/ming0419/tuchuang/raw/master/4.png"></span></p>
<p><span class="md-plain" md-inline="plain" style="box-sizing: border-box;">说明修改成功</span></p>
<p><span class="md-expand" md-inline="strong" style="box-sizing: border-box;"><strong>然后输入中文发现还是错误是因为你的数据库之前用的是默认编码，重新创建数据库就可以了</strong></span></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>java数据库连接---JDBC</title>
    <url>/2020/06/10/java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5---JDBC/</url>
    <content><![CDATA[<p><em>本文来源于</em>：<a href="https://www.runoob.com/">菜鸟教程</a></p>
<p>(1) 在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE TABLE `websites` <span class="token punctuation">(</span>
 `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT <span class="token class-name">NULL</span> AUTO_INCREMENT<span class="token punctuation">,</span>
 `name` <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'站点名称'</span><span class="token punctuation">,</span>
 `url` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span><span class="token punctuation">,</span>
 `alexa` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'Alexa 排名'</span><span class="token punctuation">,</span>
 `country` <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'国家'</span><span class="token punctuation">,</span>
 <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span>
<span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> AUTO_INCREMENT<span class="token operator">=</span><span class="token number">10</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(2)  插入数据：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">INSERT INTO `websites` VALUES
<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'https://www.google.cm/'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">,</span> <span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">,</span> <span class="token string">'13'</span><span class="token punctuation">,</span> <span class="token string">'CN'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span> <span class="token string">'http://www.runoob.com'</span><span class="token punctuation">,</span> <span class="token string">'5892'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'微博'</span><span class="token punctuation">,</span> <span class="token string">'http://weibo.com/'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'CN'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">,</span> <span class="token string">'https://www.facebook.com/'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/202006100009065458037.png" alt="image.png"></p>
<p>(3)然后新建一个类:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ca<span class="token punctuation">.</span>coop</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>
 
   <span class="token comment">// MySQL 8.0 以下版本 - JDBC 驱动名及数据库 URL</span>
   <span class="token comment">// static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  </span>
   <span class="token comment">// static final String DB_URL = "jdbc:mysql://localhost:3306/RUNOOB";</span>

   <span class="token comment">// MySQL 8.0 以上版本 - JDBC 驱动名及数据库 URL</span>
   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">;</span>  
   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/runoob?useSSL=false&amp;serverTimezone=UTC"</span><span class="token punctuation">;</span>


   <span class="token comment">// 数据库的用户名与密码，需要根据自己的设置</span>
   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASS <span class="token operator">=</span> <span class="token string">"ming000"</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
           <span class="token comment">// 注册 JDBC 驱动</span>
           <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>
       
           <span class="token comment">// 打开链接</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接数据库..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>
       
           <span class="token comment">// 执行查询</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 实例化Statement对象..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">String</span> sql<span class="token punctuation">;</span>
           sql <span class="token operator">=</span> <span class="token string">"SELECT id, name, url FROM websites"</span><span class="token punctuation">;</span>
           <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
       
           <span class="token comment">// 展开结果集数据库</span>
           <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               <span class="token comment">// 通过字段检索</span>
               <span class="token keyword">int</span> id  <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">String</span> url <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
               <span class="token comment">// 输出数据</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", 站点名称: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", 站点 URL: "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token comment">// 完成后关闭</span>
           rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> se<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token comment">// 处理 JDBC 错误</span>
           se<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token comment">// 处理 Class.forName 错误</span>
           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>
           <span class="token comment">// 关闭资源</span>
           <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
               <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> se2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token punctuation">&#125;</span><span class="token comment">// 什么都不做</span>
           <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
               <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> se<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               se<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>(5)再导入驱动包</p>
<p>mysql-connector-java-8.0.16.jar          // —-看你mysql的版本然后导入相应的驱动包jar</p>
<p>输出结果：</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/202006100020166998966.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>新建一个标准类</title>
    <url>/2020/04/08/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A0%87%E5%87%86%E7%B1%BB/</url>
    <content><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">biaozhunlei</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//成员变量</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>       <span class="token comment">//姓名</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>               <span class="token comment">//年龄</span>

  <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//无参数构造方法</span>
  <span class="token punctuation">&#125;</span>

      <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//全参数构造方法</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
      <span class="token comment">//this.指的是访问类中的成员变量，用来区分成员变量和局部变量（重名问题）</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//get取值   set赋值</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>






<span class="token keyword">package</span> <span class="token namespace">biaozhunlei</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

      <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//赋值</span>
      stu1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//赋值</span>

      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> stu1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",年龄："</span> <span class="token operator">+</span> stu1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//取值</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> stu2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",年龄："</span> <span class="token operator">+</span> stu2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stu2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//重新赋值</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> stu2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",年龄："</span> <span class="token operator">+</span> stu2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>
 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出结果</p>
<p><a href="https://gitee.com/ming0419/tuchuang/raw/master/202004081221309406966.png"><img src="https://gitee.com/ming0419/tuchuang/raw/master/202004081221309406966.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>随机点名器</title>
    <url>/2020/05/14/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D%E5%99%A8/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>点击按钮随机点名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
 

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> namelist<span class="token operator">=</span><span class="token punctuation">[</span>
<span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"贺六"</span><span class="token punctuation">,</span><span class="token string">"孙九"</span><span class="token punctuation">,</span><span class="token string">"赵十"</span><span class="token punctuation">,</span><span class="token string">"刘一"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mytime<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                     <span class="token comment">// function 声明一个函数</span>
   <span class="token keyword">var</span> bt<span class="token operator">=</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>mytime<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       bt<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"停止点名"</span><span class="token punctuation">;</span>
       <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    
   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
       bt<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"开始点名"</span><span class="token punctuation">;</span>
       <span class="token function">clearTimeout</span><span class="token punctuation">(</span>mytime<span class="token punctuation">)</span><span class="token punctuation">;</span>
       mytime<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                    
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>          

                               <span class="token comment">//代码不完整        //代码不完整       //代码不完整</span>
          
<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">var</span> box<span class="token operator">=</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//var num=Math.floor(Math.random()*100000)%namelist.length; 随机整数跟数组长度求余数，</span>
   <span class="token comment">//更容易理解的方式是：</span>
   <span class="token keyword">var</span> num<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>namelist<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果一样的都是0到长度之间的随机整数</span>
   box<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>namelist<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
   mytime<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"show()"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//刷新速度</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>                                    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bodybj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>亲，准备好点名了吗？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bt<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doit()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始点名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>                        
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>html</category>
      </categories>
  </entry>
  <entry>
    <title>Linux常用的基本命令</title>
    <url>/2020/12/24/2020-12-24-Linux%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote>
<p>绝对路径和相对路径</p>
</blockquote>
<p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p>
<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>
<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>
<p><strong>绝对路径：</strong></p>
<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>
<p><strong>相对路径：</strong></p>
<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>
<blockquote>
<p>处理目录的常用命令</p>
</blockquote>
<p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp: 复制文件或目录</li>
<li>rm: 移除文件或目录</li>
<li>mv: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>
<blockquote>
<p>ls （列出目录）</p>
</blockquote>
<p>在Linux系统当中， ls 命令可能是最常被运行的。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<p>将目录下的所有文件列出来(含属性与隐藏档)</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# ls -al ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>cd （切换目录）</p>
</blockquote>
<p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">cd [相对路径或绝对路径]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 切换到用户目录下
[root@kuangshen &#x2F;]# cd home  

# 使用 mkdir 命令创建 kuangstudy 目录
[root@kuangshen home]# mkdir kuangstudy

# 进入 kuangstudy 目录
[root@kuangshen home]# cd kuangstudy

# 回到上一级
[root@kuangshen kuangstudy]# cd ..

# 回到根目录
[root@kuangshen kuangstudy]# cd &#x2F;

# 表示回到自己的家目录，亦即是 &#x2F;root 这个目录
[root@kuangshen kuangstudy]# cd ~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p>
<blockquote>
<p>pwd ( 显示目前所在的目录 )</p>
</blockquote>
<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen kuangstudy]#pwd [-P]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 单纯显示出目前的工作目录
[root@kuangshen ~]# pwd
&#x2F;root

# 如果是链接，要显示真实地址，可以使用 -P参数
[root@kuangshen &#x2F;]# cd bin
[root@kuangshen bin]# pwd -P
&#x2F;usr&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mkdir （创建新目录）</p>
</blockquote>
<p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir [-mp] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 进入我们用户目录下
[root@kuangshen &#x2F;]# cd &#x2F;home

# 创建一个 test 文件夹
[root@kuangshen home]# mkdir test

# 创建多层级目录
[root@kuangshen home]# mkdir test1&#x2F;test2&#x2F;test3&#x2F;test4
mkdir: cannot create directory ‘test1&#x2F;test2&#x2F;test3&#x2F;test4’:
No such file or directory  # &lt;&#x3D;&#x3D; 没办法直接创建此目录啊！

# 加了这个 -p 的选项，可以自行帮你创建多层目录！
[root@kuangshen home]# mkdir -p test1&#x2F;test2&#x2F;test3&#x2F;test4

# 创建权限为 rwx--x--x 的目录。
[root@kuangshen home]# mkdir -m 711 test2
[root@kuangshen home]# ls -l
drwxr-xr-x 2 root root  4096 Mar 12 21:55 test
drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1
drwx--x--x 2 root root  4096 Mar 12 21:58 test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>rmdir ( 删除空的目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">rmdir [-p] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 看看有多少目录存在？
[root@kuangshen home]# ls -l
drwxr-xr-x 2 root root  4096 Mar 12 21:55 test
drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1
drwx--x--x 2 root root  4096 Mar 12 21:58 test2

# 可直接删除掉，没问题
[root@kuangshen home]# rmdir test

# 因为尚有内容，所以无法删除！
[root@kuangshen home]# rmdir test1
rmdir: failed to remove ‘test1’: Directory not empty

# 利用 -p 这个选项，立刻就可以将 test1&#x2F;test2&#x2F;test3&#x2F;test4 依次删除。
[root@kuangshen home]# rmdir -p test1&#x2F;test2&#x2F;test3&#x2F;test4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p>
<blockquote>
<p>cp ( 复制文件或目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)
[root@www ~]# cp [options] source1 source2 source3 .... directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>
<li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 找一个有文件的目录，我这里找到 root目录
[root@kuangshen home]# cd &#x2F;root
[root@kuangshen ~]# ls
install.sh
[root@kuangshen ~]# cd &#x2F;home

# 复制 root目录下的install.sh 到 home目录下
[root@kuangshen home]# cp &#x2F;root&#x2F;install.sh &#x2F;home
[root@kuangshen home]# ls
install.sh

# 再次复制，加上-i参数，增加覆盖询问？
[root@kuangshen home]# cp -i &#x2F;root&#x2F;install.sh &#x2F;home
cp: overwrite ‘&#x2F;home&#x2F;install.sh’? y # n不覆盖，y为覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>rm ( 移除文件或目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">rm [-fir] 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！
[root@kuangshen home]# rm -i install.sh
rm: remove regular file ‘install.sh’? y
# 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！

# 尽量不要在服务器上使用 rm -rf &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mv  ( 移动文件与目录，或修改名称 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# mv [-fiu] source destination
[root@www ~]# mv [options] source1 source2 source3 .... directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 复制一个文件到当前目录
[root@kuangshen home]# cp &#x2F;root&#x2F;install.sh &#x2F;home

# 创建一个文件夹 test
[root@kuangshen home]# mkdir test

# 将复制过来的文件移动到我们创建的目录，并查看
[root@kuangshen home]# mv install.sh test
[root@kuangshen home]# ls
test
[root@kuangshen home]# cd test
[root@kuangshen test]# ls
install.sh

# 将文件夹重命名，然后再次查看！
[root@kuangshen test]# cd ..
[root@kuangshen home]# mv test mvtest
[root@kuangshen home]# ls
mvtest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote>
<p>看懂文件属性</p>
</blockquote>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201224201647440.png" alt="image-20201224201647440"></p>
<p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p>
<ul>
<li>当为[ <strong>d</strong> ]则是目录</li>
<li>当为[ <strong>-</strong> ]则是文件；</li>
<li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li>
<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li>
<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>
<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>
<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>
<p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201224201624065.png" alt="image-20201224201624065"></p>
<p>从左至右用0-9这些数字来表示。</p>
<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中：</p>
<p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>
<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>
<p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p>
<blockquote>
<p>修改文件属性</p>
</blockquote>
<p><strong>1、chgrp：更改文件属组</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chgrp [-R] 属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chown [–R] 属主名 文件名
chown [-R] 属主名：属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>3、chmod：更改文件9个属性</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chmod [-R] xyz 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<pre class="line-numbers language-none"><code class="language-none">r:4     w:2         x:1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">chmod 770 filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以自己下去多进行测试！</p>
<h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p>
<blockquote>
<p>cat 由第一行开始显示文件内容</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">cat [-AbEnTv]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 查看网络配置: 文件地址 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;
[root@kuangshen ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0
DEVICE&#x3D;eth0
BOOTPROTO&#x3D;dhcp
ONBOOT&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>tac</p>
</blockquote>
<p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen ~]# tac &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0
ONBOOT&#x3D;yes
BOOTPROTO&#x3D;dhcp
DEVICE&#x3D;eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>nl  显示行号</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">nl [-bnw] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen ~]# nl &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0
1DEVICE&#x3D;eth0
2BOOTPROTO&#x3D;dhcp
3ONBOOT&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>more  一页一页翻动</p>
</blockquote>
<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter   ：代表向下翻『一行』；</li>
<li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f    ：立刻显示出档名以及目前显示的行数；</li>
<li>q    ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login
....(中间省略)....
--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>less  一页一页翻动，以下实例输出/etc/man.config文件的内容：</p>
</blockquote>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串  ：向下搜寻『字串』的功能；</li>
<li>?字串  ：向上搜寻『字串』的功能；</li>
<li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q   ：离开 less 这个程序；</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login
....(中间省略)....
:   # 这里可以等待你输入命令！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>head  取出文件前面几行</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">head [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<blockquote>
<p>tail  取出文件后面几行</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">tail [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen etc]# tail -n 20 &#x2F;etc&#x2F;csh.login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<blockquote>
<p>拓展：Linux 链接概念</p>
</blockquote>
<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p>
<p>情况下，<strong>ln</strong> 命令产生硬链接。</p>
<p><strong>硬连接</strong></p>
<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<p><strong>软连接</strong></p>
<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
<p><strong>测试：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen &#x2F;]# cd &#x2F;home
[root@kuangshen home]# touch f1 # 创建一个测试文件f1
[root@kuangshen home]# ls
f1
[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2
[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3
[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息
397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1
397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2
397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"># echo 字符串输出 <span class="token operator">>></span> f1 输出到 f1文件
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># echo <span class="token string">"I am f1 file"</span> <span class="token operator">>></span>f1
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># cat f1
<span class="token class-name">I</span> am f1 file
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># cat f2
<span class="token class-name">I</span> am f1 file
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># cat f3
<span class="token class-name">I</span> am f1 file
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># rm <span class="token operator">-</span>f f1
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># cat f2
<span class="token class-name">I</span> am f1 file
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@kuangshen</span> home<span class="token punctuation">]</span># cat f3
cat<span class="token operator">:</span> f3<span class="token operator">:</span> <span class="token class-name">No</span> such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p>
<p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>
<ul>
<li>删除符号连接f3,对f1,f2无影响；</li>
<li>删除硬连接f2，对f1,f3也无影响；</li>
<li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li>
<li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Vim使用及账号用户管理</title>
    <url>/2020/12/24/2020-12-24-Vim%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B4%A6%E5%8F%B7%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>什么是Vim编辑器</p>
</blockquote>
<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>
<p>vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vim 键盘图：</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/vi-vim-cheat-sheet-sch.gif" alt="img"></p>
<blockquote>
<p>三种使用模式</p>
</blockquote>
<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p>
<p><strong>命令模式：</strong></p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<p><strong>输入模式：</strong></p>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<p><strong>底线命令模式</strong></p>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/vim-vi-workmodel.png" alt="img"></p>
<blockquote>
<p>上手体验一下，在home目录下测试</p>
</blockquote>
<p>如果你想要使用 vi 来建立一个名为 kuangstudy.txt 的文件时，你可以这样做：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen home]# vim kuangstudy.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后就会进入文件</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201224205949874.png" alt="image-20201224205949874"></p>
<p><strong>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</strong></p>
<p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p>
<p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p>
<p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201224201513793.png" alt="image-20201224201513793"></p>
<p><strong>按下 ESC 按钮回到一般模式</strong></p>
<p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p>
<p>在一般模式中按下 <strong>:wq</strong> 储存后离开 vim！</p>
<p><img src="https://gitee.com/ming0419/tuchuang/raw/master/image-20201224201536674.png" alt="image-20201224201536674"></p>
<p>OK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。</p>
<blockquote>
<p>Vim 按键说明</p>
</blockquote>
<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>
<p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left">n&lt; space&gt;</td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td>
</tr>
<tr>
<td align="left">n&lt; Enter&gt;</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制与粘贴</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
</tbody></table>
<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">i, I</td>
<td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">[Esc]</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><blockquote>
<p>简介</p>
</blockquote>
<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<blockquote>
<p>用户账号的管理</p>
</blockquote>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p>
<blockquote>
<p>添加账号 useradd</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">useradd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参数说明：</p>
<ul>
<li><p>选项 :</p>
</li>
<li><ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-m　使用者目录如不存在则自动建立。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名 :</p>
</li>
<li><ul>
<li>指定新账号的登录名。</li>
</ul>
</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 &#x2F;home&#x2F;kuangshen
[root@kuangshen home]# useradd -m kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p>
<blockquote>
<p>Linux下如何切换用户</p>
</blockquote>
<p>1.切换用户的命令为：su username 【username是你的用户名哦】</p>
<p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p>
<p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p>
<p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p>
<p>$表示普通用户</p>
<p>#表示超级用户，也就是root用户</p>
<blockquote>
<p>删除帐号</p>
</blockquote>
<p>如果一个用户的账号不再使用，可以从系统中删除。</p>
<p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用userdel命令，其格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">userdel 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen home]# userdel -r kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p>
<blockquote>
<p>修改帐号</p>
</blockquote>
<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用usermod命令，其格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">usermod 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p>
<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z –g developer kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<blockquote>
<p>用户口令的管理</p>
</blockquote>
<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>
<p>命令的格式为：</p>
<pre class="line-numbers language-none"><code class="language-none">passwd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<p>如果默认用户名，则修改当前用户的口令。</p>
<p>例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ passwd 
Old password:******
New password:*******
Re-enter new password:*******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<pre class="line-numbers language-none"><code class="language-none"># passwd kuangshen
New password:*******
Re-enter new password:*******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>
<p>为用户指定空口令时，执行下列形式的命令：</p>
<pre class="line-numbers language-none"><code class="language-none"># passwd -d kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。</p>
<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># passwd -l kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p>
<blockquote>
<p>增加一个新的用户组使用groupadd命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupadd 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<p>实例1：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupadd group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p>
<p>实例2：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupadd -g 101 group2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p>
<blockquote>
<p>如果要删除一个已有的用户组，使用groupdel命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupdel 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupdel group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令从系统中删除组group1。</p>
<blockquote>
<p>修改用户组的属性使用groupmod命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupmod 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># 此命令将组group2的组标识号修改为102。
groupmod -g 102 group2

# 将组group2的标识号改为10000，组名修改为group3。
groupmod –g 10000 -n group3 group2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>切换组</p>
</blockquote>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<pre class="line-numbers language-none"><code class="language-none">$ newgrp root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p>
<blockquote>
<p>/etc/passwd</p>
</blockquote>
<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>
<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p>
<p>下面分别介绍这些文件的内容。</p>
<p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<pre class="line-numbers language-none"><code class="language-none">＃ cat &#x2F;etc&#x2F;passwd

root:x:0:0:Superuser:&#x2F;:
daemon:x:1:1:System daemons:&#x2F;etc:
bin:x:2:2:Owner of system commands:&#x2F;bin:
sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:
adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:
uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:
auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:
cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:
listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:
lp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<pre class="line-numbers language-none"><code class="language-none">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1）”用户名”是代表用户账号的字符串。</p>
<p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>
<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
<p>2）“口令”一些系统中，存放着加密后的用户口令字。</p>
<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
<p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p>
<p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p>
<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>
<p>4）“组标识号”字段记录的是用户所属的用户组。</p>
<p>它对应着/etc/group文件中的一条记录。</p>
<p>5)“注释性描述”字段记录着用户的一些个人情况。</p>
<p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p>
<p>6)“主目录”，也就是用户的起始工作目录。</p>
<p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
<p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p>
<p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>
<p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p>
<p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>
<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>
<p>8)系统中有一类用户称为伪用户（pseudo users）。</p>
<p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>
<p>常见的伪用户如下所示：</p>
<pre class="line-numbers language-none"><code class="language-none">伪 用 户 含 义
bin 拥有可执行的用户命令文件
sys 拥有系统文件
adm 拥有帐户文件
uucp UUCP使用
lp lp或lpd子系统使用
nobody NFS使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>/etc/shadow</p>
</blockquote>
<p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p>
<p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>
<p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p>
<p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>
<pre class="line-numbers language-none"><code class="language-none">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</li>
<li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li>
<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li>
<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>
<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>
<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>
<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>
<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>
</ol>
<blockquote>
<p>/etc/group</p>
</blockquote>
<p>用户组的所有信息都存放在/etc/group文件中。</p>
<p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>
<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>
<p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>
<p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p>
<p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p>
<pre class="line-numbers language-none"><code class="language-none">组名:口令:组标识号:组内用户列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li><p>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</p>
</li>
<li><p>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</p>
</li>
<li><p>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</p>
</li>
<li><p>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p>
</li>
</ol>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用命令为 df、du。</p>
<ul>
<li>df ：列出文件系统的整体磁盘使用量</li>
<li>du：检查磁盘空间使用量</li>
</ul>
<blockquote>
<p>df</p>
</blockquote>
<p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">df [-ahikHTm] [目录或文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 将系统内所有的文件系统列出来！
# 在 Linux 底下如果 df 没有加任何选项
# 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！
[root@kuangshen &#x2F;]# df
Filesystem     1K-blocks   Used Available Use% Mounted on
devtmpfs          889100       0    889100   0% &#x2F;dev
tmpfs             899460     704    898756   1% &#x2F;dev&#x2F;shm
tmpfs             899460     496    898964   1% &#x2F;run
tmpfs             899460       0    899460   0% &#x2F;sys&#x2F;fs&#x2F;cgroup
&#x2F;dev&#x2F;vda1       41152812 6586736  32662368  17% &#x2F;
tmpfs             179896       0    179896   0% &#x2F;run&#x2F;user&#x2F;0
# 将容量结果以易读的容量格式显示出来
[root@kuangshen &#x2F;]# df -h
Filesystem     Size Used Avail Use% Mounted on
devtmpfs       869M     0 869M   0% &#x2F;dev
tmpfs           879M 708K 878M   1% &#x2F;dev&#x2F;shm
tmpfs           879M 496K 878M   1% &#x2F;run
tmpfs           879M     0 879M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup
&#x2F;dev&#x2F;vda1       40G  6.3G   32G  17% &#x2F;
tmpfs           176M     0 176M   0% &#x2F;run&#x2F;user&#x2F;0
# 将系统内的所有特殊文件格式及名称都列出来
[root@kuangshen &#x2F;]# df -aT
Filesystem     Type       1K-blocks   Used Available Use% Mounted on
sysfs         sysfs               0       0         0    - &#x2F;sys
proc           proc                0       0         0    - &#x2F;proc
devtmpfs       devtmpfs       889100       0    889100   0% &#x2F;dev
securityfs     securityfs          0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;security
tmpfs         tmpfs          899460     708    898752   1% &#x2F;dev&#x2F;shm
devpts         devpts              0       0         0    - &#x2F;dev&#x2F;pts
tmpfs         tmpfs          899460     496    898964   1% &#x2F;run
tmpfs         tmpfs          899460       0    899460   0% &#x2F;sys&#x2F;fs&#x2F;cgroup
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd
pstore         pstore              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;pstore
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls,net_prio
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacct
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices
cgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event
configfs       configfs            0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;config
&#x2F;dev&#x2F;vda1     ext4         41152812 6586748  32662356  17% &#x2F;
systemd-1      -                   -       -         -    - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc
mqueue         mqueue              0       0         0    - &#x2F;dev&#x2F;mqueue
debugfs       debugfs             0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;debug
hugetlbfs     hugetlbfs           0       0         0    - &#x2F;dev&#x2F;hugepages
tmpfs         tmpfs          179896       0    179896   0% &#x2F;run&#x2F;user&#x2F;0
binfmt_misc   binfmt_misc         0       0         0    - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc
# 将 &#x2F;etc 底下的可用的磁盘容量以易读的容量格式显示

[root@kuangshen &#x2F;]# df -h &#x2F;etc
Filesystem     Size Used Avail Use% Mounted on
&#x2F;dev&#x2F;vda1       40G  6.3G   32G  17% &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>du</p>
</blockquote>
<p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">du [-ahskm] 文件或目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:
# 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。
[root@kuangshen home]# du
16.&#x2F;redis
8.&#x2F;www&#x2F;.oracle_jre_usage  # 包括隐藏文件的目录
24.&#x2F;www
48.                        # 这个目录(.)所占用的总量
# 将文件的容量也列出来
[root@kuangshen home]# du -a
4.&#x2F;redis&#x2F;.bash_profile
4.&#x2F;redis&#x2F;.bash_logout    
....中间省略....
4.&#x2F;kuangstudy.txt # 有文件的列表了
48.
# 检查根目录底下每个目录所占用的容量
[root@kuangshen home]# du -sm &#x2F;*
0&#x2F;bin
146&#x2F;boot
.....中间省略....
0&#x2F;proc
.....中间省略....
1&#x2F;tmp
3026&#x2F;usr  # 系统初期最大就是他了啦！
513&#x2F;var
2666&#x2F;www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通配符 * 来代表每个目录。</p>
<p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p>
<blockquote>
<p>磁盘挂载与卸除</p>
</blockquote>
<p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p>
<p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p>
<p>磁盘挂载语法：</p>
<pre class="line-numbers language-none"><code class="language-none">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none"># 将 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！
[root@www ~]# mkdir &#x2F;mnt&#x2F;hdc6
[root@www ~]# mount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6
[root@www ~]# df
Filesystem           1K-blocks     Used Available Use% Mounted on
&#x2F;dev&#x2F;hdc6              1976312     42072   1833836   3% &#x2F;mnt&#x2F;hdc6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>磁盘卸载命令 umount 语法：</p>
<pre class="line-numbers language-none"><code class="language-none">umount [-fn] 装置文件名或挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>
<li>-n ：不升级 /etc/mtab 情况下卸除。</li>
</ul>
<p>卸载/dev/hdc6</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@www</span> <span class="token operator">~</span><span class="token punctuation">]</span># umount <span class="token operator">/</span>dev<span class="token operator">/</span>hdc6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
</search>
